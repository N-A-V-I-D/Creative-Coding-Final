{"ast":null,"code":"/*!\r\n * EventEmitter2\r\n * https://github.com/hij1nx/EventEmitter2\r\n *\r\n * Copyright (c) 2013 hij1nx\r\n * Licensed under the MIT license.\r\n */\n;\n!function (undefined) {\n  var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {\n    return Object.prototype.toString.call(obj) === \"[object Array]\";\n  };\n  var defaultMaxListeners = 10;\n\n  function init() {\n    this._events = {};\n\n    if (this._conf) {\n      configure.call(this, this._conf);\n    }\n  }\n\n  function configure(conf) {\n    if (conf) {\n      this._conf = conf;\n      conf.delimiter && (this.delimiter = conf.delimiter);\n      conf.maxListeners && (this._events.maxListeners = conf.maxListeners);\n      conf.wildcard && (this.wildcard = conf.wildcard);\n      conf.newListener && (this.newListener = conf.newListener);\n\n      if (this.wildcard) {\n        this.listenerTree = {};\n      }\n    }\n  }\n\n  function EventEmitter(conf) {\n    this._events = {};\n    this.newListener = false;\n    configure.call(this, conf);\n  }\n\n  EventEmitter.EventEmitter2 = EventEmitter; // backwards compatibility for exporting EventEmitter property\n  //\n  // Attention, function return type now is array, always !\n  // It has zero elements if no any matches found and one or more\n  // elements (leafs) if there are matches\n  //\n\n  function searchListenerTree(handlers, type, tree, i) {\n    if (!tree) {\n      return [];\n    }\n\n    var listeners = [],\n        leaf,\n        len,\n        branch,\n        xTree,\n        xxTree,\n        isolatedBranch,\n        endReached,\n        typeLength = type.length,\n        currentType = type[i],\n        nextType = type[i + 1];\n\n    if (i === typeLength && tree._listeners) {\n      //\n      // If at the end of the event(s) list and the tree has listeners\n      // invoke those listeners.\n      //\n      if (typeof tree._listeners === 'function') {\n        handlers && handlers.push(tree._listeners);\n        return [tree];\n      } else {\n        for (leaf = 0, len = tree._listeners.length; leaf < len; leaf++) {\n          handlers && handlers.push(tree._listeners[leaf]);\n        }\n\n        return [tree];\n      }\n    }\n\n    if (currentType === '*' || currentType === '**' || tree[currentType]) {\n      //\n      // If the event emitted is '*' at this part\n      // or there is a concrete match at this patch\n      //\n      if (currentType === '*') {\n        for (branch in tree) {\n          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {\n            listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i + 1));\n          }\n        }\n\n        return listeners;\n      } else if (currentType === '**') {\n        endReached = i + 1 === typeLength || i + 2 === typeLength && nextType === '*';\n\n        if (endReached && tree._listeners) {\n          // The next element has a _listeners, add it to the handlers.\n          listeners = listeners.concat(searchListenerTree(handlers, type, tree, typeLength));\n        }\n\n        for (branch in tree) {\n          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {\n            if (branch === '*' || branch === '**') {\n              if (tree[branch]._listeners && !endReached) {\n                listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], typeLength));\n              }\n\n              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n            } else if (branch === nextType) {\n              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i + 2));\n            } else {\n              // No match on this one, shift into the tree but not in the type array.\n              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n            }\n          }\n        }\n\n        return listeners;\n      }\n\n      listeners = listeners.concat(searchListenerTree(handlers, type, tree[currentType], i + 1));\n    }\n\n    xTree = tree['*'];\n\n    if (xTree) {\n      //\n      // If the listener tree will allow any match for this part,\n      // then recursively explore all branches of the tree\n      //\n      searchListenerTree(handlers, type, xTree, i + 1);\n    }\n\n    xxTree = tree['**'];\n\n    if (xxTree) {\n      if (i < typeLength) {\n        if (xxTree._listeners) {\n          // If we have a listener on a '**', it will catch all, so add its handler.\n          searchListenerTree(handlers, type, xxTree, typeLength);\n        } // Build arrays of matching next branches and others.\n\n\n        for (branch in xxTree) {\n          if (branch !== '_listeners' && xxTree.hasOwnProperty(branch)) {\n            if (branch === nextType) {\n              // We know the next element will match, so jump twice.\n              searchListenerTree(handlers, type, xxTree[branch], i + 2);\n            } else if (branch === currentType) {\n              // Current node matches, move into the tree.\n              searchListenerTree(handlers, type, xxTree[branch], i + 1);\n            } else {\n              isolatedBranch = {};\n              isolatedBranch[branch] = xxTree[branch];\n              searchListenerTree(handlers, type, {\n                '**': isolatedBranch\n              }, i + 1);\n            }\n          }\n        }\n      } else if (xxTree._listeners) {\n        // We have reached the end and still on a '**'\n        searchListenerTree(handlers, type, xxTree, typeLength);\n      } else if (xxTree['*'] && xxTree['*']._listeners) {\n        searchListenerTree(handlers, type, xxTree['*'], typeLength);\n      }\n    }\n\n    return listeners;\n  }\n\n  function growListenerTree(type, listener) {\n    type = typeof type === 'string' ? type.split(this.delimiter) : type.slice(); //\n    // Looks for two consecutive '**', if so, don't add the event at all.\n    //\n\n    for (var i = 0, len = type.length; i + 1 < len; i++) {\n      if (type[i] === '**' && type[i + 1] === '**') {\n        return;\n      }\n    }\n\n    var tree = this.listenerTree;\n    var name = type.shift();\n\n    while (name) {\n      if (!tree[name]) {\n        tree[name] = {};\n      }\n\n      tree = tree[name];\n\n      if (type.length === 0) {\n        if (!tree._listeners) {\n          tree._listeners = listener;\n        } else if (typeof tree._listeners === 'function') {\n          tree._listeners = [tree._listeners, listener];\n        } else if (isArray(tree._listeners)) {\n          tree._listeners.push(listener);\n\n          if (!tree._listeners.warned) {\n            var m = defaultMaxListeners;\n\n            if (typeof this._events.maxListeners !== 'undefined') {\n              m = this._events.maxListeners;\n            }\n\n            if (m > 0 && tree._listeners.length > m) {\n              tree._listeners.warned = true;\n              console.error('(node) warning: possible EventEmitter memory ' + 'leak detected. %d listeners added. ' + 'Use emitter.setMaxListeners() to increase limit.', tree._listeners.length);\n\n              if (console.trace) {\n                console.trace();\n              }\n            }\n          }\n        }\n\n        return true;\n      }\n\n      name = type.shift();\n    }\n\n    return true;\n  } // By default EventEmitters will print a warning if more than\n  // 10 listeners are added to it. This is a useful default which\n  // helps finding memory leaks.\n  //\n  // Obviously not all Emitters should be limited to 10. This function allows\n  // that to be increased. Set to zero for unlimited.\n\n\n  EventEmitter.prototype.delimiter = '.';\n\n  EventEmitter.prototype.setMaxListeners = function (n) {\n    this._events || init.call(this);\n    this._events.maxListeners = n;\n    if (!this._conf) this._conf = {};\n    this._conf.maxListeners = n;\n  };\n\n  EventEmitter.prototype.event = '';\n\n  EventEmitter.prototype.once = function (event, fn) {\n    this.many(event, 1, fn);\n    return this;\n  };\n\n  EventEmitter.prototype.many = function (event, ttl, fn) {\n    var self = this;\n\n    if (typeof fn !== 'function') {\n      throw new Error('many only accepts instances of Function');\n    }\n\n    function listener() {\n      if (--ttl === 0) {\n        self.off(event, listener);\n      }\n\n      fn.apply(this, arguments);\n    }\n\n    listener._origin = fn;\n    this.on(event, listener);\n    return self;\n  };\n\n  EventEmitter.prototype.emit = function () {\n    this._events || init.call(this);\n    var type = arguments[0];\n\n    if (type === 'newListener' && !this.newListener) {\n      if (!this._events.newListener) {\n        return false;\n      }\n    }\n\n    var al = arguments.length;\n    var args, l, i, j;\n    var handler;\n\n    if (this._all && this._all.length) {\n      handler = this._all.slice();\n\n      if (al > 3) {\n        args = new Array(al);\n\n        for (j = 1; j < al; j++) args[j] = arguments[j];\n      }\n\n      for (i = 0, l = handler.length; i < l; i++) {\n        this.event = type;\n\n        switch (al) {\n          case 1:\n            handler[i].call(this, type);\n            break;\n\n          case 2:\n            handler[i].call(this, type, arguments[1]);\n            break;\n\n          case 3:\n            handler[i].call(this, type, arguments[1], arguments[2]);\n            break;\n\n          default:\n            handler[i].apply(this, args);\n        }\n      }\n    }\n\n    if (this.wildcard) {\n      handler = [];\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n      searchListenerTree.call(this, handler, ns, this.listenerTree, 0);\n    } else {\n      handler = this._events[type];\n\n      if (typeof handler === 'function') {\n        this.event = type;\n\n        switch (al) {\n          case 1:\n            handler.call(this);\n            break;\n\n          case 2:\n            handler.call(this, arguments[1]);\n            break;\n\n          case 3:\n            handler.call(this, arguments[1], arguments[2]);\n            break;\n\n          default:\n            args = new Array(al - 1);\n\n            for (j = 1; j < al; j++) args[j - 1] = arguments[j];\n\n            handler.apply(this, args);\n        }\n\n        return true;\n      } else if (handler) {\n        // need to make copy of handlers because list can change in the middle\n        // of emit call\n        handler = handler.slice();\n      }\n    }\n\n    if (handler && handler.length) {\n      if (al > 3) {\n        args = new Array(al - 1);\n\n        for (j = 1; j < al; j++) args[j - 1] = arguments[j];\n      }\n\n      for (i = 0, l = handler.length; i < l; i++) {\n        this.event = type;\n\n        switch (al) {\n          case 1:\n            handler[i].call(this);\n            break;\n\n          case 2:\n            handler[i].call(this, arguments[1]);\n            break;\n\n          case 3:\n            handler[i].call(this, arguments[1], arguments[2]);\n            break;\n\n          default:\n            handler[i].apply(this, args);\n        }\n      }\n\n      return true;\n    } else if (!this._all && type === 'error') {\n      if (arguments[1] instanceof Error) {\n        throw arguments[1]; // Unhandled 'error' event\n      } else {\n        throw new Error(\"Uncaught, unspecified 'error' event.\");\n      }\n\n      return false;\n    }\n\n    return !!this._all;\n  };\n\n  EventEmitter.prototype.emitAsync = function () {\n    this._events || init.call(this);\n    var type = arguments[0];\n\n    if (type === 'newListener' && !this.newListener) {\n      if (!this._events.newListener) {\n        return Promise.resolve([false]);\n      }\n    }\n\n    var promises = [];\n    var al = arguments.length;\n    var args, l, i, j;\n    var handler;\n\n    if (this._all) {\n      if (al > 3) {\n        args = new Array(al);\n\n        for (j = 1; j < al; j++) args[j] = arguments[j];\n      }\n\n      for (i = 0, l = this._all.length; i < l; i++) {\n        this.event = type;\n\n        switch (al) {\n          case 1:\n            promises.push(this._all[i].call(this, type));\n            break;\n\n          case 2:\n            promises.push(this._all[i].call(this, type, arguments[1]));\n            break;\n\n          case 3:\n            promises.push(this._all[i].call(this, type, arguments[1], arguments[2]));\n            break;\n\n          default:\n            promises.push(this._all[i].apply(this, args));\n        }\n      }\n    }\n\n    if (this.wildcard) {\n      handler = [];\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n      searchListenerTree.call(this, handler, ns, this.listenerTree, 0);\n    } else {\n      handler = this._events[type];\n    }\n\n    if (typeof handler === 'function') {\n      this.event = type;\n\n      switch (al) {\n        case 1:\n          promises.push(handler.call(this));\n          break;\n\n        case 2:\n          promises.push(handler.call(this, arguments[1]));\n          break;\n\n        case 3:\n          promises.push(handler.call(this, arguments[1], arguments[2]));\n          break;\n\n        default:\n          args = new Array(al - 1);\n\n          for (j = 1; j < al; j++) args[j - 1] = arguments[j];\n\n          promises.push(handler.apply(this, args));\n      }\n    } else if (handler && handler.length) {\n      if (al > 3) {\n        args = new Array(al - 1);\n\n        for (j = 1; j < al; j++) args[j - 1] = arguments[j];\n      }\n\n      for (i = 0, l = handler.length; i < l; i++) {\n        this.event = type;\n\n        switch (al) {\n          case 1:\n            promises.push(handler[i].call(this));\n            break;\n\n          case 2:\n            promises.push(handler[i].call(this, arguments[1]));\n            break;\n\n          case 3:\n            promises.push(handler[i].call(this, arguments[1], arguments[2]));\n            break;\n\n          default:\n            promises.push(handler[i].apply(this, args));\n        }\n      }\n    } else if (!this._all && type === 'error') {\n      if (arguments[1] instanceof Error) {\n        return Promise.reject(arguments[1]); // Unhandled 'error' event\n      } else {\n        return Promise.reject(\"Uncaught, unspecified 'error' event.\");\n      }\n    }\n\n    return Promise.all(promises);\n  };\n\n  EventEmitter.prototype.on = function (type, listener) {\n    if (typeof type === 'function') {\n      this.onAny(type);\n      return this;\n    }\n\n    if (typeof listener !== 'function') {\n      throw new Error('on only accepts instances of Function');\n    }\n\n    this._events || init.call(this); // To avoid recursion in the case that type == \"newListeners\"! Before\n    // adding it to the listeners, first emit \"newListeners\".\n\n    this.emit('newListener', type, listener);\n\n    if (this.wildcard) {\n      growListenerTree.call(this, type, listener);\n      return this;\n    }\n\n    if (!this._events[type]) {\n      // Optimize the case of one listener. Don't need the extra array object.\n      this._events[type] = listener;\n    } else if (typeof this._events[type] === 'function') {\n      // Adding the second element, need to change to array.\n      this._events[type] = [this._events[type], listener];\n    } else if (isArray(this._events[type])) {\n      // If we've already got an array, just append.\n      this._events[type].push(listener); // Check for listener leak\n\n\n      if (!this._events[type].warned) {\n        var m = defaultMaxListeners;\n\n        if (typeof this._events.maxListeners !== 'undefined') {\n          m = this._events.maxListeners;\n        }\n\n        if (m > 0 && this._events[type].length > m) {\n          this._events[type].warned = true;\n          console.error('(node) warning: possible EventEmitter memory ' + 'leak detected. %d listeners added. ' + 'Use emitter.setMaxListeners() to increase limit.', this._events[type].length);\n\n          if (console.trace) {\n            console.trace();\n          }\n        }\n      }\n    }\n\n    return this;\n  };\n\n  EventEmitter.prototype.onAny = function (fn) {\n    if (typeof fn !== 'function') {\n      throw new Error('onAny only accepts instances of Function');\n    }\n\n    if (!this._all) {\n      this._all = [];\n    } // Add the function to the event listener collection.\n\n\n    this._all.push(fn);\n\n    return this;\n  };\n\n  EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n  EventEmitter.prototype.off = function (type, listener) {\n    if (typeof listener !== 'function') {\n      throw new Error('removeListener only takes instances of Function');\n    }\n\n    var handlers,\n        leafs = [];\n\n    if (this.wildcard) {\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n      leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n    } else {\n      // does not use listeners(), so no side effect of creating _events[type]\n      if (!this._events[type]) return this;\n      handlers = this._events[type];\n      leafs.push({\n        _listeners: handlers\n      });\n    }\n\n    for (var iLeaf = 0; iLeaf < leafs.length; iLeaf++) {\n      var leaf = leafs[iLeaf];\n      handlers = leaf._listeners;\n\n      if (isArray(handlers)) {\n        var position = -1;\n\n        for (var i = 0, length = handlers.length; i < length; i++) {\n          if (handlers[i] === listener || handlers[i].listener && handlers[i].listener === listener || handlers[i]._origin && handlers[i]._origin === listener) {\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0) {\n          continue;\n        }\n\n        if (this.wildcard) {\n          leaf._listeners.splice(position, 1);\n        } else {\n          this._events[type].splice(position, 1);\n        }\n\n        if (handlers.length === 0) {\n          if (this.wildcard) {\n            delete leaf._listeners;\n          } else {\n            delete this._events[type];\n          }\n        }\n\n        this.emit(\"removeListener\", type, listener);\n        return this;\n      } else if (handlers === listener || handlers.listener && handlers.listener === listener || handlers._origin && handlers._origin === listener) {\n        if (this.wildcard) {\n          delete leaf._listeners;\n        } else {\n          delete this._events[type];\n        }\n\n        this.emit(\"removeListener\", type, listener);\n      }\n    }\n\n    function recursivelyGarbageCollect(root) {\n      if (root === undefined) {\n        return;\n      }\n\n      var keys = Object.keys(root);\n\n      for (var i in keys) {\n        var key = keys[i];\n        var obj = root[key];\n        if (obj instanceof Function || typeof obj !== \"object\") continue;\n\n        if (Object.keys(obj).length > 0) {\n          recursivelyGarbageCollect(root[key]);\n        }\n\n        if (Object.keys(obj).length === 0) {\n          delete root[key];\n        }\n      }\n    }\n\n    recursivelyGarbageCollect(this.listenerTree);\n    return this;\n  };\n\n  EventEmitter.prototype.offAny = function (fn) {\n    var i = 0,\n        l = 0,\n        fns;\n\n    if (fn && this._all && this._all.length > 0) {\n      fns = this._all;\n\n      for (i = 0, l = fns.length; i < l; i++) {\n        if (fn === fns[i]) {\n          fns.splice(i, 1);\n          this.emit(\"removeListenerAny\", fn);\n          return this;\n        }\n      }\n    } else {\n      fns = this._all;\n\n      for (i = 0, l = fns.length; i < l; i++) this.emit(\"removeListenerAny\", fns[i]);\n\n      this._all = [];\n    }\n\n    return this;\n  };\n\n  EventEmitter.prototype.removeListener = EventEmitter.prototype.off;\n\n  EventEmitter.prototype.removeAllListeners = function (type) {\n    if (arguments.length === 0) {\n      !this._events || init.call(this);\n      return this;\n    }\n\n    if (this.wildcard) {\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n      var leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n\n      for (var iLeaf = 0; iLeaf < leafs.length; iLeaf++) {\n        var leaf = leafs[iLeaf];\n        leaf._listeners = null;\n      }\n    } else {\n      if (!this._events || !this._events[type]) return this;\n      this._events[type] = null;\n    }\n\n    return this;\n  };\n\n  EventEmitter.prototype.listeners = function (type) {\n    if (this.wildcard) {\n      var handlers = [];\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n      searchListenerTree.call(this, handlers, ns, this.listenerTree, 0);\n      return handlers;\n    }\n\n    this._events || init.call(this);\n    if (!this._events[type]) this._events[type] = [];\n\n    if (!isArray(this._events[type])) {\n      this._events[type] = [this._events[type]];\n    }\n\n    return this._events[type];\n  };\n\n  EventEmitter.prototype.listenersAny = function () {\n    if (this._all) {\n      return this._all;\n    } else {\n      return [];\n    }\n  };\n\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(function () {\n      return EventEmitter;\n    });\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    module.exports = EventEmitter;\n  } else {\n    // Browser global.\n    window.EventEmitter2 = EventEmitter;\n  }\n}();","map":{"version":3,"names":["undefined","isArray","Array","_isArray","obj","Object","prototype","toString","call","defaultMaxListeners","init","_events","_conf","configure","conf","delimiter","maxListeners","wildcard","newListener","listenerTree","EventEmitter","EventEmitter2","searchListenerTree","handlers","type","tree","i","listeners","leaf","len","branch","xTree","xxTree","isolatedBranch","endReached","typeLength","length","currentType","nextType","_listeners","push","hasOwnProperty","concat","growListenerTree","listener","split","slice","name","shift","warned","m","console","error","trace","setMaxListeners","n","event","once","fn","many","ttl","self","Error","off","apply","arguments","_origin","on","emit","al","args","l","j","handler","_all","ns","emitAsync","Promise","resolve","promises","reject","all","onAny","addListener","leafs","iLeaf","position","splice","recursivelyGarbageCollect","root","keys","key","Function","offAny","fns","removeListener","removeAllListeners","listenersAny","define","amd","exports","module","window"],"sources":["/Users/navid/Documents/Final Project 2/vocab/node_modules/eventemitter2/lib/eventemitter2.js"],"sourcesContent":["/*!\r\n * EventEmitter2\r\n * https://github.com/hij1nx/EventEmitter2\r\n *\r\n * Copyright (c) 2013 hij1nx\r\n * Licensed under the MIT license.\r\n */\r\n;!function(undefined) {\r\n\r\n  var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {\r\n    return Object.prototype.toString.call(obj) === \"[object Array]\";\r\n  };\r\n  var defaultMaxListeners = 10;\r\n\r\n  function init() {\r\n    this._events = {};\r\n    if (this._conf) {\r\n      configure.call(this, this._conf);\r\n    }\r\n  }\r\n\r\n  function configure(conf) {\r\n    if (conf) {\r\n\r\n      this._conf = conf;\r\n\r\n      conf.delimiter && (this.delimiter = conf.delimiter);\r\n      conf.maxListeners && (this._events.maxListeners = conf.maxListeners);\r\n      conf.wildcard && (this.wildcard = conf.wildcard);\r\n      conf.newListener && (this.newListener = conf.newListener);\r\n\r\n      if (this.wildcard) {\r\n        this.listenerTree = {};\r\n      }\r\n    }\r\n  }\r\n\r\n  function EventEmitter(conf) {\r\n    this._events = {};\r\n    this.newListener = false;\r\n    configure.call(this, conf);\r\n  }\r\n  EventEmitter.EventEmitter2 = EventEmitter; // backwards compatibility for exporting EventEmitter property\r\n\r\n  //\r\n  // Attention, function return type now is array, always !\r\n  // It has zero elements if no any matches found and one or more\r\n  // elements (leafs) if there are matches\r\n  //\r\n  function searchListenerTree(handlers, type, tree, i) {\r\n    if (!tree) {\r\n      return [];\r\n    }\r\n    var listeners=[], leaf, len, branch, xTree, xxTree, isolatedBranch, endReached,\r\n        typeLength = type.length, currentType = type[i], nextType = type[i+1];\r\n    if (i === typeLength && tree._listeners) {\r\n      //\r\n      // If at the end of the event(s) list and the tree has listeners\r\n      // invoke those listeners.\r\n      //\r\n      if (typeof tree._listeners === 'function') {\r\n        handlers && handlers.push(tree._listeners);\r\n        return [tree];\r\n      } else {\r\n        for (leaf = 0, len = tree._listeners.length; leaf < len; leaf++) {\r\n          handlers && handlers.push(tree._listeners[leaf]);\r\n        }\r\n        return [tree];\r\n      }\r\n    }\r\n\r\n    if ((currentType === '*' || currentType === '**') || tree[currentType]) {\r\n      //\r\n      // If the event emitted is '*' at this part\r\n      // or there is a concrete match at this patch\r\n      //\r\n      if (currentType === '*') {\r\n        for (branch in tree) {\r\n          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {\r\n            listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i+1));\r\n          }\r\n        }\r\n        return listeners;\r\n      } else if(currentType === '**') {\r\n        endReached = (i+1 === typeLength || (i+2 === typeLength && nextType === '*'));\r\n        if(endReached && tree._listeners) {\r\n          // The next element has a _listeners, add it to the handlers.\r\n          listeners = listeners.concat(searchListenerTree(handlers, type, tree, typeLength));\r\n        }\r\n\r\n        for (branch in tree) {\r\n          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {\r\n            if(branch === '*' || branch === '**') {\r\n              if(tree[branch]._listeners && !endReached) {\r\n                listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], typeLength));\r\n              }\r\n              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\r\n            } else if(branch === nextType) {\r\n              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i+2));\r\n            } else {\r\n              // No match on this one, shift into the tree but not in the type array.\r\n              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\r\n            }\r\n          }\r\n        }\r\n        return listeners;\r\n      }\r\n\r\n      listeners = listeners.concat(searchListenerTree(handlers, type, tree[currentType], i+1));\r\n    }\r\n\r\n    xTree = tree['*'];\r\n    if (xTree) {\r\n      //\r\n      // If the listener tree will allow any match for this part,\r\n      // then recursively explore all branches of the tree\r\n      //\r\n      searchListenerTree(handlers, type, xTree, i+1);\r\n    }\r\n\r\n    xxTree = tree['**'];\r\n    if(xxTree) {\r\n      if(i < typeLength) {\r\n        if(xxTree._listeners) {\r\n          // If we have a listener on a '**', it will catch all, so add its handler.\r\n          searchListenerTree(handlers, type, xxTree, typeLength);\r\n        }\r\n\r\n        // Build arrays of matching next branches and others.\r\n        for(branch in xxTree) {\r\n          if(branch !== '_listeners' && xxTree.hasOwnProperty(branch)) {\r\n            if(branch === nextType) {\r\n              // We know the next element will match, so jump twice.\r\n              searchListenerTree(handlers, type, xxTree[branch], i+2);\r\n            } else if(branch === currentType) {\r\n              // Current node matches, move into the tree.\r\n              searchListenerTree(handlers, type, xxTree[branch], i+1);\r\n            } else {\r\n              isolatedBranch = {};\r\n              isolatedBranch[branch] = xxTree[branch];\r\n              searchListenerTree(handlers, type, { '**': isolatedBranch }, i+1);\r\n            }\r\n          }\r\n        }\r\n      } else if(xxTree._listeners) {\r\n        // We have reached the end and still on a '**'\r\n        searchListenerTree(handlers, type, xxTree, typeLength);\r\n      } else if(xxTree['*'] && xxTree['*']._listeners) {\r\n        searchListenerTree(handlers, type, xxTree['*'], typeLength);\r\n      }\r\n    }\r\n\r\n    return listeners;\r\n  }\r\n\r\n  function growListenerTree(type, listener) {\r\n\r\n    type = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\r\n\r\n    //\r\n    // Looks for two consecutive '**', if so, don't add the event at all.\r\n    //\r\n    for(var i = 0, len = type.length; i+1 < len; i++) {\r\n      if(type[i] === '**' && type[i+1] === '**') {\r\n        return;\r\n      }\r\n    }\r\n\r\n    var tree = this.listenerTree;\r\n    var name = type.shift();\r\n\r\n    while (name) {\r\n\r\n      if (!tree[name]) {\r\n        tree[name] = {};\r\n      }\r\n\r\n      tree = tree[name];\r\n\r\n      if (type.length === 0) {\r\n\r\n        if (!tree._listeners) {\r\n          tree._listeners = listener;\r\n        }\r\n        else if(typeof tree._listeners === 'function') {\r\n          tree._listeners = [tree._listeners, listener];\r\n        }\r\n        else if (isArray(tree._listeners)) {\r\n\r\n          tree._listeners.push(listener);\r\n\r\n          if (!tree._listeners.warned) {\r\n\r\n            var m = defaultMaxListeners;\r\n\r\n            if (typeof this._events.maxListeners !== 'undefined') {\r\n              m = this._events.maxListeners;\r\n            }\r\n\r\n            if (m > 0 && tree._listeners.length > m) {\r\n\r\n              tree._listeners.warned = true;\r\n              console.error('(node) warning: possible EventEmitter memory ' +\r\n                            'leak detected. %d listeners added. ' +\r\n                            'Use emitter.setMaxListeners() to increase limit.',\r\n                            tree._listeners.length);\r\n              if(console.trace){\r\n                console.trace();\r\n              }\r\n            }\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n      name = type.shift();\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // By default EventEmitters will print a warning if more than\r\n  // 10 listeners are added to it. This is a useful default which\r\n  // helps finding memory leaks.\r\n  //\r\n  // Obviously not all Emitters should be limited to 10. This function allows\r\n  // that to be increased. Set to zero for unlimited.\r\n\r\n  EventEmitter.prototype.delimiter = '.';\r\n\r\n  EventEmitter.prototype.setMaxListeners = function(n) {\r\n    this._events || init.call(this);\r\n    this._events.maxListeners = n;\r\n    if (!this._conf) this._conf = {};\r\n    this._conf.maxListeners = n;\r\n  };\r\n\r\n  EventEmitter.prototype.event = '';\r\n\r\n  EventEmitter.prototype.once = function(event, fn) {\r\n    this.many(event, 1, fn);\r\n    return this;\r\n  };\r\n\r\n  EventEmitter.prototype.many = function(event, ttl, fn) {\r\n    var self = this;\r\n\r\n    if (typeof fn !== 'function') {\r\n      throw new Error('many only accepts instances of Function');\r\n    }\r\n\r\n    function listener() {\r\n      if (--ttl === 0) {\r\n        self.off(event, listener);\r\n      }\r\n      fn.apply(this, arguments);\r\n    }\r\n\r\n    listener._origin = fn;\r\n\r\n    this.on(event, listener);\r\n\r\n    return self;\r\n  };\r\n\r\n  EventEmitter.prototype.emit = function() {\r\n\r\n    this._events || init.call(this);\r\n\r\n    var type = arguments[0];\r\n\r\n    if (type === 'newListener' && !this.newListener) {\r\n      if (!this._events.newListener) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    var al = arguments.length;\r\n    var args,l,i,j;\r\n    var handler;\r\n\r\n    if (this._all && this._all.length) {\r\n      handler = this._all.slice();\r\n      if (al > 3) {\r\n        args = new Array(al);\r\n        for (j = 1; j < al; j++) args[j] = arguments[j];\r\n      }\r\n\r\n      for (i = 0, l = handler.length; i < l; i++) {\r\n        this.event = type;\r\n        switch (al) {\r\n        case 1:\r\n          handler[i].call(this, type);\r\n          break;\r\n        case 2:\r\n          handler[i].call(this, type, arguments[1]);\r\n          break;\r\n        case 3:\r\n          handler[i].call(this, type, arguments[1], arguments[2]);\r\n          break;\r\n        default:\r\n          handler[i].apply(this, args);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.wildcard) {\r\n      handler = [];\r\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\r\n      searchListenerTree.call(this, handler, ns, this.listenerTree, 0);\r\n    } else {\r\n      handler = this._events[type];\r\n      if (typeof handler === 'function') {\r\n        this.event = type;\r\n        switch (al) {\r\n        case 1:\r\n          handler.call(this);\r\n          break;\r\n        case 2:\r\n          handler.call(this, arguments[1]);\r\n          break;\r\n        case 3:\r\n          handler.call(this, arguments[1], arguments[2]);\r\n          break;\r\n        default:\r\n          args = new Array(al - 1);\r\n          for (j = 1; j < al; j++) args[j - 1] = arguments[j];\r\n          handler.apply(this, args);\r\n        }\r\n        return true;\r\n      } else if (handler) {\r\n        // need to make copy of handlers because list can change in the middle\r\n        // of emit call\r\n        handler = handler.slice();\r\n      }\r\n    }\r\n\r\n    if (handler && handler.length) {\r\n      if (al > 3) {\r\n        args = new Array(al - 1);\r\n        for (j = 1; j < al; j++) args[j - 1] = arguments[j];\r\n      }\r\n      for (i = 0, l = handler.length; i < l; i++) {\r\n        this.event = type;\r\n        switch (al) {\r\n        case 1:\r\n          handler[i].call(this);\r\n          break;\r\n        case 2:\r\n          handler[i].call(this, arguments[1]);\r\n          break;\r\n        case 3:\r\n          handler[i].call(this, arguments[1], arguments[2]);\r\n          break;\r\n        default:\r\n          handler[i].apply(this, args);\r\n        }\r\n      }\r\n      return true;\r\n    } else if (!this._all && type === 'error') {\r\n      if (arguments[1] instanceof Error) {\r\n        throw arguments[1]; // Unhandled 'error' event\r\n      } else {\r\n        throw new Error(\"Uncaught, unspecified 'error' event.\");\r\n      }\r\n      return false;\r\n    }\r\n\r\n    return !!this._all;\r\n  };\r\n\r\n  EventEmitter.prototype.emitAsync = function() {\r\n\r\n    this._events || init.call(this);\r\n\r\n    var type = arguments[0];\r\n\r\n    if (type === 'newListener' && !this.newListener) {\r\n        if (!this._events.newListener) { return Promise.resolve([false]); }\r\n    }\r\n\r\n    var promises= [];\r\n\r\n    var al = arguments.length;\r\n    var args,l,i,j;\r\n    var handler;\r\n\r\n    if (this._all) {\r\n      if (al > 3) {\r\n        args = new Array(al);\r\n        for (j = 1; j < al; j++) args[j] = arguments[j];\r\n      }\r\n      for (i = 0, l = this._all.length; i < l; i++) {\r\n        this.event = type;\r\n        switch (al) {\r\n        case 1:\r\n          promises.push(this._all[i].call(this, type));\r\n          break;\r\n        case 2:\r\n          promises.push(this._all[i].call(this, type, arguments[1]));\r\n          break;\r\n        case 3:\r\n          promises.push(this._all[i].call(this, type, arguments[1], arguments[2]));\r\n          break;\r\n        default:\r\n          promises.push(this._all[i].apply(this, args));\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.wildcard) {\r\n      handler = [];\r\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\r\n      searchListenerTree.call(this, handler, ns, this.listenerTree, 0);\r\n    } else {\r\n      handler = this._events[type];\r\n    }\r\n\r\n    if (typeof handler === 'function') {\r\n      this.event = type;\r\n      switch (al) {\r\n      case 1:\r\n        promises.push(handler.call(this));\r\n        break;\r\n      case 2:\r\n        promises.push(handler.call(this, arguments[1]));\r\n        break;\r\n      case 3:\r\n        promises.push(handler.call(this, arguments[1], arguments[2]));\r\n        break;\r\n      default:\r\n        args = new Array(al - 1);\r\n        for (j = 1; j < al; j++) args[j - 1] = arguments[j];\r\n        promises.push(handler.apply(this, args));\r\n      }\r\n    } else if (handler && handler.length) {\r\n      if (al > 3) {\r\n        args = new Array(al - 1);\r\n        for (j = 1; j < al; j++) args[j - 1] = arguments[j];\r\n      }\r\n      for (i = 0, l = handler.length; i < l; i++) {\r\n        this.event = type;\r\n        switch (al) {\r\n        case 1:\r\n          promises.push(handler[i].call(this));\r\n          break;\r\n        case 2:\r\n          promises.push(handler[i].call(this, arguments[1]));\r\n          break;\r\n        case 3:\r\n          promises.push(handler[i].call(this, arguments[1], arguments[2]));\r\n          break;\r\n        default:\r\n          promises.push(handler[i].apply(this, args));\r\n        }\r\n      }\r\n    } else if (!this._all && type === 'error') {\r\n      if (arguments[1] instanceof Error) {\r\n        return Promise.reject(arguments[1]); // Unhandled 'error' event\r\n      } else {\r\n        return Promise.reject(\"Uncaught, unspecified 'error' event.\");\r\n      }\r\n    }\r\n\r\n    return Promise.all(promises);\r\n  };\r\n\r\n  EventEmitter.prototype.on = function(type, listener) {\r\n\r\n    if (typeof type === 'function') {\r\n      this.onAny(type);\r\n      return this;\r\n    }\r\n\r\n    if (typeof listener !== 'function') {\r\n      throw new Error('on only accepts instances of Function');\r\n    }\r\n    this._events || init.call(this);\r\n\r\n    // To avoid recursion in the case that type == \"newListeners\"! Before\r\n    // adding it to the listeners, first emit \"newListeners\".\r\n    this.emit('newListener', type, listener);\r\n\r\n    if(this.wildcard) {\r\n      growListenerTree.call(this, type, listener);\r\n      return this;\r\n    }\r\n\r\n    if (!this._events[type]) {\r\n      // Optimize the case of one listener. Don't need the extra array object.\r\n      this._events[type] = listener;\r\n    }\r\n    else if(typeof this._events[type] === 'function') {\r\n      // Adding the second element, need to change to array.\r\n      this._events[type] = [this._events[type], listener];\r\n    }\r\n    else if (isArray(this._events[type])) {\r\n      // If we've already got an array, just append.\r\n      this._events[type].push(listener);\r\n\r\n      // Check for listener leak\r\n      if (!this._events[type].warned) {\r\n\r\n        var m = defaultMaxListeners;\r\n\r\n        if (typeof this._events.maxListeners !== 'undefined') {\r\n          m = this._events.maxListeners;\r\n        }\r\n\r\n        if (m > 0 && this._events[type].length > m) {\r\n\r\n          this._events[type].warned = true;\r\n          console.error('(node) warning: possible EventEmitter memory ' +\r\n                        'leak detected. %d listeners added. ' +\r\n                        'Use emitter.setMaxListeners() to increase limit.',\r\n                        this._events[type].length);\r\n          if(console.trace){\r\n            console.trace();\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  EventEmitter.prototype.onAny = function(fn) {\r\n\r\n    if (typeof fn !== 'function') {\r\n      throw new Error('onAny only accepts instances of Function');\r\n    }\r\n\r\n    if(!this._all) {\r\n      this._all = [];\r\n    }\r\n\r\n    // Add the function to the event listener collection.\r\n    this._all.push(fn);\r\n    return this;\r\n  };\r\n\r\n  EventEmitter.prototype.addListener = EventEmitter.prototype.on;\r\n\r\n  EventEmitter.prototype.off = function(type, listener) {\r\n    if (typeof listener !== 'function') {\r\n      throw new Error('removeListener only takes instances of Function');\r\n    }\r\n\r\n    var handlers,leafs=[];\r\n\r\n    if(this.wildcard) {\r\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\r\n      leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\r\n    }\r\n    else {\r\n      // does not use listeners(), so no side effect of creating _events[type]\r\n      if (!this._events[type]) return this;\r\n      handlers = this._events[type];\r\n      leafs.push({_listeners:handlers});\r\n    }\r\n\r\n    for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {\r\n      var leaf = leafs[iLeaf];\r\n      handlers = leaf._listeners;\r\n      if (isArray(handlers)) {\r\n\r\n        var position = -1;\r\n\r\n        for (var i = 0, length = handlers.length; i < length; i++) {\r\n          if (handlers[i] === listener ||\r\n            (handlers[i].listener && handlers[i].listener === listener) ||\r\n            (handlers[i]._origin && handlers[i]._origin === listener)) {\r\n            position = i;\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (position < 0) {\r\n          continue;\r\n        }\r\n\r\n        if(this.wildcard) {\r\n          leaf._listeners.splice(position, 1);\r\n        }\r\n        else {\r\n          this._events[type].splice(position, 1);\r\n        }\r\n\r\n        if (handlers.length === 0) {\r\n          if(this.wildcard) {\r\n            delete leaf._listeners;\r\n          }\r\n          else {\r\n            delete this._events[type];\r\n          }\r\n        }\r\n\r\n        this.emit(\"removeListener\", type, listener);\r\n\r\n        return this;\r\n      }\r\n      else if (handlers === listener ||\r\n        (handlers.listener && handlers.listener === listener) ||\r\n        (handlers._origin && handlers._origin === listener)) {\r\n        if(this.wildcard) {\r\n          delete leaf._listeners;\r\n        }\r\n        else {\r\n          delete this._events[type];\r\n        }\r\n\r\n        this.emit(\"removeListener\", type, listener);\r\n      }\r\n    }\r\n\r\n    function recursivelyGarbageCollect(root) {\r\n      if (root === undefined) {\r\n        return;\r\n      }\r\n      var keys = Object.keys(root);\r\n      for (var i in keys) {\r\n        var key = keys[i];\r\n        var obj = root[key];\r\n        if ((obj instanceof Function) || (typeof obj !== \"object\"))\r\n          continue;\r\n        if (Object.keys(obj).length > 0) {\r\n          recursivelyGarbageCollect(root[key]);\r\n        }\r\n        if (Object.keys(obj).length === 0) {\r\n          delete root[key];\r\n        }\r\n      }\r\n    }\r\n    recursivelyGarbageCollect(this.listenerTree);\r\n\r\n    return this;\r\n  };\r\n\r\n  EventEmitter.prototype.offAny = function(fn) {\r\n    var i = 0, l = 0, fns;\r\n    if (fn && this._all && this._all.length > 0) {\r\n      fns = this._all;\r\n      for(i = 0, l = fns.length; i < l; i++) {\r\n        if(fn === fns[i]) {\r\n          fns.splice(i, 1);\r\n          this.emit(\"removeListenerAny\", fn);\r\n          return this;\r\n        }\r\n      }\r\n    } else {\r\n      fns = this._all;\r\n      for(i = 0, l = fns.length; i < l; i++)\r\n        this.emit(\"removeListenerAny\", fns[i]);\r\n      this._all = [];\r\n    }\r\n    return this;\r\n  };\r\n\r\n  EventEmitter.prototype.removeListener = EventEmitter.prototype.off;\r\n\r\n  EventEmitter.prototype.removeAllListeners = function(type) {\r\n    if (arguments.length === 0) {\r\n      !this._events || init.call(this);\r\n      return this;\r\n    }\r\n\r\n    if(this.wildcard) {\r\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\r\n      var leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\r\n\r\n      for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {\r\n        var leaf = leafs[iLeaf];\r\n        leaf._listeners = null;\r\n      }\r\n    }\r\n    else {\r\n      if (!this._events || !this._events[type]) return this;\r\n      this._events[type] = null;\r\n    }\r\n    return this;\r\n  };\r\n\r\n  EventEmitter.prototype.listeners = function(type) {\r\n    if(this.wildcard) {\r\n      var handlers = [];\r\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\r\n      searchListenerTree.call(this, handlers, ns, this.listenerTree, 0);\r\n      return handlers;\r\n    }\r\n\r\n    this._events || init.call(this);\r\n\r\n    if (!this._events[type]) this._events[type] = [];\r\n    if (!isArray(this._events[type])) {\r\n      this._events[type] = [this._events[type]];\r\n    }\r\n    return this._events[type];\r\n  };\r\n\r\n  EventEmitter.prototype.listenersAny = function() {\r\n\r\n    if(this._all) {\r\n      return this._all;\r\n    }\r\n    else {\r\n      return [];\r\n    }\r\n\r\n  };\r\n\r\n  if (typeof define === 'function' && define.amd) {\r\n     // AMD. Register as an anonymous module.\r\n    define(function() {\r\n      return EventEmitter;\r\n    });\r\n  } else if (typeof exports === 'object') {\r\n    // CommonJS\r\n    module.exports = EventEmitter;\r\n  }\r\n  else {\r\n    // Browser global.\r\n    window.EventEmitter2 = EventEmitter;\r\n  }\r\n}();\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAC,CAAC,UAASA,SAAT,EAAoB;EAEpB,IAAIC,OAAO,GAAGC,KAAK,CAACD,OAAN,GAAgBC,KAAK,CAACD,OAAtB,GAAgC,SAASE,QAAT,CAAkBC,GAAlB,EAAuB;IACnE,OAAOC,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BJ,GAA/B,MAAwC,gBAA/C;EACD,CAFD;EAGA,IAAIK,mBAAmB,GAAG,EAA1B;;EAEA,SAASC,IAAT,GAAgB;IACd,KAAKC,OAAL,GAAe,EAAf;;IACA,IAAI,KAAKC,KAAT,EAAgB;MACdC,SAAS,CAACL,IAAV,CAAe,IAAf,EAAqB,KAAKI,KAA1B;IACD;EACF;;EAED,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;IACvB,IAAIA,IAAJ,EAAU;MAER,KAAKF,KAAL,GAAaE,IAAb;MAEAA,IAAI,CAACC,SAAL,KAAmB,KAAKA,SAAL,GAAiBD,IAAI,CAACC,SAAzC;MACAD,IAAI,CAACE,YAAL,KAAsB,KAAKL,OAAL,CAAaK,YAAb,GAA4BF,IAAI,CAACE,YAAvD;MACAF,IAAI,CAACG,QAAL,KAAkB,KAAKA,QAAL,GAAgBH,IAAI,CAACG,QAAvC;MACAH,IAAI,CAACI,WAAL,KAAqB,KAAKA,WAAL,GAAmBJ,IAAI,CAACI,WAA7C;;MAEA,IAAI,KAAKD,QAAT,EAAmB;QACjB,KAAKE,YAAL,GAAoB,EAApB;MACD;IACF;EACF;;EAED,SAASC,YAAT,CAAsBN,IAAtB,EAA4B;IAC1B,KAAKH,OAAL,GAAe,EAAf;IACA,KAAKO,WAAL,GAAmB,KAAnB;IACAL,SAAS,CAACL,IAAV,CAAe,IAAf,EAAqBM,IAArB;EACD;;EACDM,YAAY,CAACC,aAAb,GAA6BD,YAA7B,CAnCoB,CAmCuB;EAE3C;EACA;EACA;EACA;EACA;;EACA,SAASE,kBAAT,CAA4BC,QAA5B,EAAsCC,IAAtC,EAA4CC,IAA5C,EAAkDC,CAAlD,EAAqD;IACnD,IAAI,CAACD,IAAL,EAAW;MACT,OAAO,EAAP;IACD;;IACD,IAAIE,SAAS,GAAC,EAAd;IAAA,IAAkBC,IAAlB;IAAA,IAAwBC,GAAxB;IAAA,IAA6BC,MAA7B;IAAA,IAAqCC,KAArC;IAAA,IAA4CC,MAA5C;IAAA,IAAoDC,cAApD;IAAA,IAAoEC,UAApE;IAAA,IACIC,UAAU,GAAGX,IAAI,CAACY,MADtB;IAAA,IAC8BC,WAAW,GAAGb,IAAI,CAACE,CAAD,CADhD;IAAA,IACqDY,QAAQ,GAAGd,IAAI,CAACE,CAAC,GAAC,CAAH,CADpE;;IAEA,IAAIA,CAAC,KAAKS,UAAN,IAAoBV,IAAI,CAACc,UAA7B,EAAyC;MACvC;MACA;MACA;MACA;MACA,IAAI,OAAOd,IAAI,CAACc,UAAZ,KAA2B,UAA/B,EAA2C;QACzChB,QAAQ,IAAIA,QAAQ,CAACiB,IAAT,CAAcf,IAAI,CAACc,UAAnB,CAAZ;QACA,OAAO,CAACd,IAAD,CAAP;MACD,CAHD,MAGO;QACL,KAAKG,IAAI,GAAG,CAAP,EAAUC,GAAG,GAAGJ,IAAI,CAACc,UAAL,CAAgBH,MAArC,EAA6CR,IAAI,GAAGC,GAApD,EAAyDD,IAAI,EAA7D,EAAiE;UAC/DL,QAAQ,IAAIA,QAAQ,CAACiB,IAAT,CAAcf,IAAI,CAACc,UAAL,CAAgBX,IAAhB,CAAd,CAAZ;QACD;;QACD,OAAO,CAACH,IAAD,CAAP;MACD;IACF;;IAED,IAAKY,WAAW,KAAK,GAAhB,IAAuBA,WAAW,KAAK,IAAxC,IAAiDZ,IAAI,CAACY,WAAD,CAAzD,EAAwE;MACtE;MACA;MACA;MACA;MACA,IAAIA,WAAW,KAAK,GAApB,EAAyB;QACvB,KAAKP,MAAL,IAAeL,IAAf,EAAqB;UACnB,IAAIK,MAAM,KAAK,YAAX,IAA2BL,IAAI,CAACgB,cAAL,CAAoBX,MAApB,CAA/B,EAA4D;YAC1DH,SAAS,GAAGA,SAAS,CAACe,MAAV,CAAiBpB,kBAAkB,CAACC,QAAD,EAAWC,IAAX,EAAiBC,IAAI,CAACK,MAAD,CAArB,EAA+BJ,CAAC,GAAC,CAAjC,CAAnC,CAAZ;UACD;QACF;;QACD,OAAOC,SAAP;MACD,CAPD,MAOO,IAAGU,WAAW,KAAK,IAAnB,EAAyB;QAC9BH,UAAU,GAAIR,CAAC,GAAC,CAAF,KAAQS,UAAR,IAAuBT,CAAC,GAAC,CAAF,KAAQS,UAAR,IAAsBG,QAAQ,KAAK,GAAxE;;QACA,IAAGJ,UAAU,IAAIT,IAAI,CAACc,UAAtB,EAAkC;UAChC;UACAZ,SAAS,GAAGA,SAAS,CAACe,MAAV,CAAiBpB,kBAAkB,CAACC,QAAD,EAAWC,IAAX,EAAiBC,IAAjB,EAAuBU,UAAvB,CAAnC,CAAZ;QACD;;QAED,KAAKL,MAAL,IAAeL,IAAf,EAAqB;UACnB,IAAIK,MAAM,KAAK,YAAX,IAA2BL,IAAI,CAACgB,cAAL,CAAoBX,MAApB,CAA/B,EAA4D;YAC1D,IAAGA,MAAM,KAAK,GAAX,IAAkBA,MAAM,KAAK,IAAhC,EAAsC;cACpC,IAAGL,IAAI,CAACK,MAAD,CAAJ,CAAaS,UAAb,IAA2B,CAACL,UAA/B,EAA2C;gBACzCP,SAAS,GAAGA,SAAS,CAACe,MAAV,CAAiBpB,kBAAkB,CAACC,QAAD,EAAWC,IAAX,EAAiBC,IAAI,CAACK,MAAD,CAArB,EAA+BK,UAA/B,CAAnC,CAAZ;cACD;;cACDR,SAAS,GAAGA,SAAS,CAACe,MAAV,CAAiBpB,kBAAkB,CAACC,QAAD,EAAWC,IAAX,EAAiBC,IAAI,CAACK,MAAD,CAArB,EAA+BJ,CAA/B,CAAnC,CAAZ;YACD,CALD,MAKO,IAAGI,MAAM,KAAKQ,QAAd,EAAwB;cAC7BX,SAAS,GAAGA,SAAS,CAACe,MAAV,CAAiBpB,kBAAkB,CAACC,QAAD,EAAWC,IAAX,EAAiBC,IAAI,CAACK,MAAD,CAArB,EAA+BJ,CAAC,GAAC,CAAjC,CAAnC,CAAZ;YACD,CAFM,MAEA;cACL;cACAC,SAAS,GAAGA,SAAS,CAACe,MAAV,CAAiBpB,kBAAkB,CAACC,QAAD,EAAWC,IAAX,EAAiBC,IAAI,CAACK,MAAD,CAArB,EAA+BJ,CAA/B,CAAnC,CAAZ;YACD;UACF;QACF;;QACD,OAAOC,SAAP;MACD;;MAEDA,SAAS,GAAGA,SAAS,CAACe,MAAV,CAAiBpB,kBAAkB,CAACC,QAAD,EAAWC,IAAX,EAAiBC,IAAI,CAACY,WAAD,CAArB,EAAoCX,CAAC,GAAC,CAAtC,CAAnC,CAAZ;IACD;;IAEDK,KAAK,GAAGN,IAAI,CAAC,GAAD,CAAZ;;IACA,IAAIM,KAAJ,EAAW;MACT;MACA;MACA;MACA;MACAT,kBAAkB,CAACC,QAAD,EAAWC,IAAX,EAAiBO,KAAjB,EAAwBL,CAAC,GAAC,CAA1B,CAAlB;IACD;;IAEDM,MAAM,GAAGP,IAAI,CAAC,IAAD,CAAb;;IACA,IAAGO,MAAH,EAAW;MACT,IAAGN,CAAC,GAAGS,UAAP,EAAmB;QACjB,IAAGH,MAAM,CAACO,UAAV,EAAsB;UACpB;UACAjB,kBAAkB,CAACC,QAAD,EAAWC,IAAX,EAAiBQ,MAAjB,EAAyBG,UAAzB,CAAlB;QACD,CAJgB,CAMjB;;;QACA,KAAIL,MAAJ,IAAcE,MAAd,EAAsB;UACpB,IAAGF,MAAM,KAAK,YAAX,IAA2BE,MAAM,CAACS,cAAP,CAAsBX,MAAtB,CAA9B,EAA6D;YAC3D,IAAGA,MAAM,KAAKQ,QAAd,EAAwB;cACtB;cACAhB,kBAAkB,CAACC,QAAD,EAAWC,IAAX,EAAiBQ,MAAM,CAACF,MAAD,CAAvB,EAAiCJ,CAAC,GAAC,CAAnC,CAAlB;YACD,CAHD,MAGO,IAAGI,MAAM,KAAKO,WAAd,EAA2B;cAChC;cACAf,kBAAkB,CAACC,QAAD,EAAWC,IAAX,EAAiBQ,MAAM,CAACF,MAAD,CAAvB,EAAiCJ,CAAC,GAAC,CAAnC,CAAlB;YACD,CAHM,MAGA;cACLO,cAAc,GAAG,EAAjB;cACAA,cAAc,CAACH,MAAD,CAAd,GAAyBE,MAAM,CAACF,MAAD,CAA/B;cACAR,kBAAkB,CAACC,QAAD,EAAWC,IAAX,EAAiB;gBAAE,MAAMS;cAAR,CAAjB,EAA2CP,CAAC,GAAC,CAA7C,CAAlB;YACD;UACF;QACF;MACF,CAtBD,MAsBO,IAAGM,MAAM,CAACO,UAAV,EAAsB;QAC3B;QACAjB,kBAAkB,CAACC,QAAD,EAAWC,IAAX,EAAiBQ,MAAjB,EAAyBG,UAAzB,CAAlB;MACD,CAHM,MAGA,IAAGH,MAAM,CAAC,GAAD,CAAN,IAAeA,MAAM,CAAC,GAAD,CAAN,CAAYO,UAA9B,EAA0C;QAC/CjB,kBAAkB,CAACC,QAAD,EAAWC,IAAX,EAAiBQ,MAAM,CAAC,GAAD,CAAvB,EAA8BG,UAA9B,CAAlB;MACD;IACF;;IAED,OAAOR,SAAP;EACD;;EAED,SAASgB,gBAAT,CAA0BnB,IAA1B,EAAgCoB,QAAhC,EAA0C;IAExCpB,IAAI,GAAG,OAAOA,IAAP,KAAgB,QAAhB,GAA2BA,IAAI,CAACqB,KAAL,CAAW,KAAK9B,SAAhB,CAA3B,GAAwDS,IAAI,CAACsB,KAAL,EAA/D,CAFwC,CAIxC;IACA;IACA;;IACA,KAAI,IAAIpB,CAAC,GAAG,CAAR,EAAWG,GAAG,GAAGL,IAAI,CAACY,MAA1B,EAAkCV,CAAC,GAAC,CAAF,GAAMG,GAAxC,EAA6CH,CAAC,EAA9C,EAAkD;MAChD,IAAGF,IAAI,CAACE,CAAD,CAAJ,KAAY,IAAZ,IAAoBF,IAAI,CAACE,CAAC,GAAC,CAAH,CAAJ,KAAc,IAArC,EAA2C;QACzC;MACD;IACF;;IAED,IAAID,IAAI,GAAG,KAAKN,YAAhB;IACA,IAAI4B,IAAI,GAAGvB,IAAI,CAACwB,KAAL,EAAX;;IAEA,OAAOD,IAAP,EAAa;MAEX,IAAI,CAACtB,IAAI,CAACsB,IAAD,CAAT,EAAiB;QACftB,IAAI,CAACsB,IAAD,CAAJ,GAAa,EAAb;MACD;;MAEDtB,IAAI,GAAGA,IAAI,CAACsB,IAAD,CAAX;;MAEA,IAAIvB,IAAI,CAACY,MAAL,KAAgB,CAApB,EAAuB;QAErB,IAAI,CAACX,IAAI,CAACc,UAAV,EAAsB;UACpBd,IAAI,CAACc,UAAL,GAAkBK,QAAlB;QACD,CAFD,MAGK,IAAG,OAAOnB,IAAI,CAACc,UAAZ,KAA2B,UAA9B,EAA0C;UAC7Cd,IAAI,CAACc,UAAL,GAAkB,CAACd,IAAI,CAACc,UAAN,EAAkBK,QAAlB,CAAlB;QACD,CAFI,MAGA,IAAI3C,OAAO,CAACwB,IAAI,CAACc,UAAN,CAAX,EAA8B;UAEjCd,IAAI,CAACc,UAAL,CAAgBC,IAAhB,CAAqBI,QAArB;;UAEA,IAAI,CAACnB,IAAI,CAACc,UAAL,CAAgBU,MAArB,EAA6B;YAE3B,IAAIC,CAAC,GAAGzC,mBAAR;;YAEA,IAAI,OAAO,KAAKE,OAAL,CAAaK,YAApB,KAAqC,WAAzC,EAAsD;cACpDkC,CAAC,GAAG,KAAKvC,OAAL,CAAaK,YAAjB;YACD;;YAED,IAAIkC,CAAC,GAAG,CAAJ,IAASzB,IAAI,CAACc,UAAL,CAAgBH,MAAhB,GAAyBc,CAAtC,EAAyC;cAEvCzB,IAAI,CAACc,UAAL,CAAgBU,MAAhB,GAAyB,IAAzB;cACAE,OAAO,CAACC,KAAR,CAAc,kDACA,qCADA,GAEA,kDAFd,EAGc3B,IAAI,CAACc,UAAL,CAAgBH,MAH9B;;cAIA,IAAGe,OAAO,CAACE,KAAX,EAAiB;gBACfF,OAAO,CAACE,KAAR;cACD;YACF;UACF;QACF;;QACD,OAAO,IAAP;MACD;;MACDN,IAAI,GAAGvB,IAAI,CAACwB,KAAL,EAAP;IACD;;IACD,OAAO,IAAP;EACD,CAlNmB,CAoNpB;EACA;EACA;EACA;EACA;EACA;;;EAEA5B,YAAY,CAACd,SAAb,CAAuBS,SAAvB,GAAmC,GAAnC;;EAEAK,YAAY,CAACd,SAAb,CAAuBgD,eAAvB,GAAyC,UAASC,CAAT,EAAY;IACnD,KAAK5C,OAAL,IAAgBD,IAAI,CAACF,IAAL,CAAU,IAAV,CAAhB;IACA,KAAKG,OAAL,CAAaK,YAAb,GAA4BuC,CAA5B;IACA,IAAI,CAAC,KAAK3C,KAAV,EAAiB,KAAKA,KAAL,GAAa,EAAb;IACjB,KAAKA,KAAL,CAAWI,YAAX,GAA0BuC,CAA1B;EACD,CALD;;EAOAnC,YAAY,CAACd,SAAb,CAAuBkD,KAAvB,GAA+B,EAA/B;;EAEApC,YAAY,CAACd,SAAb,CAAuBmD,IAAvB,GAA8B,UAASD,KAAT,EAAgBE,EAAhB,EAAoB;IAChD,KAAKC,IAAL,CAAUH,KAAV,EAAiB,CAAjB,EAAoBE,EAApB;IACA,OAAO,IAAP;EACD,CAHD;;EAKAtC,YAAY,CAACd,SAAb,CAAuBqD,IAAvB,GAA8B,UAASH,KAAT,EAAgBI,GAAhB,EAAqBF,EAArB,EAAyB;IACrD,IAAIG,IAAI,GAAG,IAAX;;IAEA,IAAI,OAAOH,EAAP,KAAc,UAAlB,EAA8B;MAC5B,MAAM,IAAII,KAAJ,CAAU,yCAAV,CAAN;IACD;;IAED,SAASlB,QAAT,GAAoB;MAClB,IAAI,EAAEgB,GAAF,KAAU,CAAd,EAAiB;QACfC,IAAI,CAACE,GAAL,CAASP,KAAT,EAAgBZ,QAAhB;MACD;;MACDc,EAAE,CAACM,KAAH,CAAS,IAAT,EAAeC,SAAf;IACD;;IAEDrB,QAAQ,CAACsB,OAAT,GAAmBR,EAAnB;IAEA,KAAKS,EAAL,CAAQX,KAAR,EAAeZ,QAAf;IAEA,OAAOiB,IAAP;EACD,CAnBD;;EAqBAzC,YAAY,CAACd,SAAb,CAAuB8D,IAAvB,GAA8B,YAAW;IAEvC,KAAKzD,OAAL,IAAgBD,IAAI,CAACF,IAAL,CAAU,IAAV,CAAhB;IAEA,IAAIgB,IAAI,GAAGyC,SAAS,CAAC,CAAD,CAApB;;IAEA,IAAIzC,IAAI,KAAK,aAAT,IAA0B,CAAC,KAAKN,WAApC,EAAiD;MAC/C,IAAI,CAAC,KAAKP,OAAL,CAAaO,WAAlB,EAA+B;QAC7B,OAAO,KAAP;MACD;IACF;;IAED,IAAImD,EAAE,GAAGJ,SAAS,CAAC7B,MAAnB;IACA,IAAIkC,IAAJ,EAASC,CAAT,EAAW7C,CAAX,EAAa8C,CAAb;IACA,IAAIC,OAAJ;;IAEA,IAAI,KAAKC,IAAL,IAAa,KAAKA,IAAL,CAAUtC,MAA3B,EAAmC;MACjCqC,OAAO,GAAG,KAAKC,IAAL,CAAU5B,KAAV,EAAV;;MACA,IAAIuB,EAAE,GAAG,CAAT,EAAY;QACVC,IAAI,GAAG,IAAIpE,KAAJ,CAAUmE,EAAV,CAAP;;QACA,KAAKG,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGH,EAAhB,EAAoBG,CAAC,EAArB,EAAyBF,IAAI,CAACE,CAAD,CAAJ,GAAUP,SAAS,CAACO,CAAD,CAAnB;MAC1B;;MAED,KAAK9C,CAAC,GAAG,CAAJ,EAAO6C,CAAC,GAAGE,OAAO,CAACrC,MAAxB,EAAgCV,CAAC,GAAG6C,CAApC,EAAuC7C,CAAC,EAAxC,EAA4C;QAC1C,KAAK8B,KAAL,GAAahC,IAAb;;QACA,QAAQ6C,EAAR;UACA,KAAK,CAAL;YACEI,OAAO,CAAC/C,CAAD,CAAP,CAAWlB,IAAX,CAAgB,IAAhB,EAAsBgB,IAAtB;YACA;;UACF,KAAK,CAAL;YACEiD,OAAO,CAAC/C,CAAD,CAAP,CAAWlB,IAAX,CAAgB,IAAhB,EAAsBgB,IAAtB,EAA4ByC,SAAS,CAAC,CAAD,CAArC;YACA;;UACF,KAAK,CAAL;YACEQ,OAAO,CAAC/C,CAAD,CAAP,CAAWlB,IAAX,CAAgB,IAAhB,EAAsBgB,IAAtB,EAA4ByC,SAAS,CAAC,CAAD,CAArC,EAA0CA,SAAS,CAAC,CAAD,CAAnD;YACA;;UACF;YACEQ,OAAO,CAAC/C,CAAD,CAAP,CAAWsC,KAAX,CAAiB,IAAjB,EAAuBM,IAAvB;QAXF;MAaD;IACF;;IAED,IAAI,KAAKrD,QAAT,EAAmB;MACjBwD,OAAO,GAAG,EAAV;MACA,IAAIE,EAAE,GAAG,OAAOnD,IAAP,KAAgB,QAAhB,GAA2BA,IAAI,CAACqB,KAAL,CAAW,KAAK9B,SAAhB,CAA3B,GAAwDS,IAAI,CAACsB,KAAL,EAAjE;MACAxB,kBAAkB,CAACd,IAAnB,CAAwB,IAAxB,EAA8BiE,OAA9B,EAAuCE,EAAvC,EAA2C,KAAKxD,YAAhD,EAA8D,CAA9D;IACD,CAJD,MAIO;MACLsD,OAAO,GAAG,KAAK9D,OAAL,CAAaa,IAAb,CAAV;;MACA,IAAI,OAAOiD,OAAP,KAAmB,UAAvB,EAAmC;QACjC,KAAKjB,KAAL,GAAahC,IAAb;;QACA,QAAQ6C,EAAR;UACA,KAAK,CAAL;YACEI,OAAO,CAACjE,IAAR,CAAa,IAAb;YACA;;UACF,KAAK,CAAL;YACEiE,OAAO,CAACjE,IAAR,CAAa,IAAb,EAAmByD,SAAS,CAAC,CAAD,CAA5B;YACA;;UACF,KAAK,CAAL;YACEQ,OAAO,CAACjE,IAAR,CAAa,IAAb,EAAmByD,SAAS,CAAC,CAAD,CAA5B,EAAiCA,SAAS,CAAC,CAAD,CAA1C;YACA;;UACF;YACEK,IAAI,GAAG,IAAIpE,KAAJ,CAAUmE,EAAE,GAAG,CAAf,CAAP;;YACA,KAAKG,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGH,EAAhB,EAAoBG,CAAC,EAArB,EAAyBF,IAAI,CAACE,CAAC,GAAG,CAAL,CAAJ,GAAcP,SAAS,CAACO,CAAD,CAAvB;;YACzBC,OAAO,CAACT,KAAR,CAAc,IAAd,EAAoBM,IAApB;QAbF;;QAeA,OAAO,IAAP;MACD,CAlBD,MAkBO,IAAIG,OAAJ,EAAa;QAClB;QACA;QACAA,OAAO,GAAGA,OAAO,CAAC3B,KAAR,EAAV;MACD;IACF;;IAED,IAAI2B,OAAO,IAAIA,OAAO,CAACrC,MAAvB,EAA+B;MAC7B,IAAIiC,EAAE,GAAG,CAAT,EAAY;QACVC,IAAI,GAAG,IAAIpE,KAAJ,CAAUmE,EAAE,GAAG,CAAf,CAAP;;QACA,KAAKG,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGH,EAAhB,EAAoBG,CAAC,EAArB,EAAyBF,IAAI,CAACE,CAAC,GAAG,CAAL,CAAJ,GAAcP,SAAS,CAACO,CAAD,CAAvB;MAC1B;;MACD,KAAK9C,CAAC,GAAG,CAAJ,EAAO6C,CAAC,GAAGE,OAAO,CAACrC,MAAxB,EAAgCV,CAAC,GAAG6C,CAApC,EAAuC7C,CAAC,EAAxC,EAA4C;QAC1C,KAAK8B,KAAL,GAAahC,IAAb;;QACA,QAAQ6C,EAAR;UACA,KAAK,CAAL;YACEI,OAAO,CAAC/C,CAAD,CAAP,CAAWlB,IAAX,CAAgB,IAAhB;YACA;;UACF,KAAK,CAAL;YACEiE,OAAO,CAAC/C,CAAD,CAAP,CAAWlB,IAAX,CAAgB,IAAhB,EAAsByD,SAAS,CAAC,CAAD,CAA/B;YACA;;UACF,KAAK,CAAL;YACEQ,OAAO,CAAC/C,CAAD,CAAP,CAAWlB,IAAX,CAAgB,IAAhB,EAAsByD,SAAS,CAAC,CAAD,CAA/B,EAAoCA,SAAS,CAAC,CAAD,CAA7C;YACA;;UACF;YACEQ,OAAO,CAAC/C,CAAD,CAAP,CAAWsC,KAAX,CAAiB,IAAjB,EAAuBM,IAAvB;QAXF;MAaD;;MACD,OAAO,IAAP;IACD,CAtBD,MAsBO,IAAI,CAAC,KAAKI,IAAN,IAAclD,IAAI,KAAK,OAA3B,EAAoC;MACzC,IAAIyC,SAAS,CAAC,CAAD,CAAT,YAAwBH,KAA5B,EAAmC;QACjC,MAAMG,SAAS,CAAC,CAAD,CAAf,CADiC,CACb;MACrB,CAFD,MAEO;QACL,MAAM,IAAIH,KAAJ,CAAU,sCAAV,CAAN;MACD;;MACD,OAAO,KAAP;IACD;;IAED,OAAO,CAAC,CAAC,KAAKY,IAAd;EACD,CAxGD;;EA0GAtD,YAAY,CAACd,SAAb,CAAuBsE,SAAvB,GAAmC,YAAW;IAE5C,KAAKjE,OAAL,IAAgBD,IAAI,CAACF,IAAL,CAAU,IAAV,CAAhB;IAEA,IAAIgB,IAAI,GAAGyC,SAAS,CAAC,CAAD,CAApB;;IAEA,IAAIzC,IAAI,KAAK,aAAT,IAA0B,CAAC,KAAKN,WAApC,EAAiD;MAC7C,IAAI,CAAC,KAAKP,OAAL,CAAaO,WAAlB,EAA+B;QAAE,OAAO2D,OAAO,CAACC,OAAR,CAAgB,CAAC,KAAD,CAAhB,CAAP;MAAkC;IACtE;;IAED,IAAIC,QAAQ,GAAE,EAAd;IAEA,IAAIV,EAAE,GAAGJ,SAAS,CAAC7B,MAAnB;IACA,IAAIkC,IAAJ,EAASC,CAAT,EAAW7C,CAAX,EAAa8C,CAAb;IACA,IAAIC,OAAJ;;IAEA,IAAI,KAAKC,IAAT,EAAe;MACb,IAAIL,EAAE,GAAG,CAAT,EAAY;QACVC,IAAI,GAAG,IAAIpE,KAAJ,CAAUmE,EAAV,CAAP;;QACA,KAAKG,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGH,EAAhB,EAAoBG,CAAC,EAArB,EAAyBF,IAAI,CAACE,CAAD,CAAJ,GAAUP,SAAS,CAACO,CAAD,CAAnB;MAC1B;;MACD,KAAK9C,CAAC,GAAG,CAAJ,EAAO6C,CAAC,GAAG,KAAKG,IAAL,CAAUtC,MAA1B,EAAkCV,CAAC,GAAG6C,CAAtC,EAAyC7C,CAAC,EAA1C,EAA8C;QAC5C,KAAK8B,KAAL,GAAahC,IAAb;;QACA,QAAQ6C,EAAR;UACA,KAAK,CAAL;YACEU,QAAQ,CAACvC,IAAT,CAAc,KAAKkC,IAAL,CAAUhD,CAAV,EAAalB,IAAb,CAAkB,IAAlB,EAAwBgB,IAAxB,CAAd;YACA;;UACF,KAAK,CAAL;YACEuD,QAAQ,CAACvC,IAAT,CAAc,KAAKkC,IAAL,CAAUhD,CAAV,EAAalB,IAAb,CAAkB,IAAlB,EAAwBgB,IAAxB,EAA8ByC,SAAS,CAAC,CAAD,CAAvC,CAAd;YACA;;UACF,KAAK,CAAL;YACEc,QAAQ,CAACvC,IAAT,CAAc,KAAKkC,IAAL,CAAUhD,CAAV,EAAalB,IAAb,CAAkB,IAAlB,EAAwBgB,IAAxB,EAA8ByC,SAAS,CAAC,CAAD,CAAvC,EAA4CA,SAAS,CAAC,CAAD,CAArD,CAAd;YACA;;UACF;YACEc,QAAQ,CAACvC,IAAT,CAAc,KAAKkC,IAAL,CAAUhD,CAAV,EAAasC,KAAb,CAAmB,IAAnB,EAAyBM,IAAzB,CAAd;QAXF;MAaD;IACF;;IAED,IAAI,KAAKrD,QAAT,EAAmB;MACjBwD,OAAO,GAAG,EAAV;MACA,IAAIE,EAAE,GAAG,OAAOnD,IAAP,KAAgB,QAAhB,GAA2BA,IAAI,CAACqB,KAAL,CAAW,KAAK9B,SAAhB,CAA3B,GAAwDS,IAAI,CAACsB,KAAL,EAAjE;MACAxB,kBAAkB,CAACd,IAAnB,CAAwB,IAAxB,EAA8BiE,OAA9B,EAAuCE,EAAvC,EAA2C,KAAKxD,YAAhD,EAA8D,CAA9D;IACD,CAJD,MAIO;MACLsD,OAAO,GAAG,KAAK9D,OAAL,CAAaa,IAAb,CAAV;IACD;;IAED,IAAI,OAAOiD,OAAP,KAAmB,UAAvB,EAAmC;MACjC,KAAKjB,KAAL,GAAahC,IAAb;;MACA,QAAQ6C,EAAR;QACA,KAAK,CAAL;UACEU,QAAQ,CAACvC,IAAT,CAAciC,OAAO,CAACjE,IAAR,CAAa,IAAb,CAAd;UACA;;QACF,KAAK,CAAL;UACEuE,QAAQ,CAACvC,IAAT,CAAciC,OAAO,CAACjE,IAAR,CAAa,IAAb,EAAmByD,SAAS,CAAC,CAAD,CAA5B,CAAd;UACA;;QACF,KAAK,CAAL;UACEc,QAAQ,CAACvC,IAAT,CAAciC,OAAO,CAACjE,IAAR,CAAa,IAAb,EAAmByD,SAAS,CAAC,CAAD,CAA5B,EAAiCA,SAAS,CAAC,CAAD,CAA1C,CAAd;UACA;;QACF;UACEK,IAAI,GAAG,IAAIpE,KAAJ,CAAUmE,EAAE,GAAG,CAAf,CAAP;;UACA,KAAKG,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGH,EAAhB,EAAoBG,CAAC,EAArB,EAAyBF,IAAI,CAACE,CAAC,GAAG,CAAL,CAAJ,GAAcP,SAAS,CAACO,CAAD,CAAvB;;UACzBO,QAAQ,CAACvC,IAAT,CAAciC,OAAO,CAACT,KAAR,CAAc,IAAd,EAAoBM,IAApB,CAAd;MAbF;IAeD,CAjBD,MAiBO,IAAIG,OAAO,IAAIA,OAAO,CAACrC,MAAvB,EAA+B;MACpC,IAAIiC,EAAE,GAAG,CAAT,EAAY;QACVC,IAAI,GAAG,IAAIpE,KAAJ,CAAUmE,EAAE,GAAG,CAAf,CAAP;;QACA,KAAKG,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGH,EAAhB,EAAoBG,CAAC,EAArB,EAAyBF,IAAI,CAACE,CAAC,GAAG,CAAL,CAAJ,GAAcP,SAAS,CAACO,CAAD,CAAvB;MAC1B;;MACD,KAAK9C,CAAC,GAAG,CAAJ,EAAO6C,CAAC,GAAGE,OAAO,CAACrC,MAAxB,EAAgCV,CAAC,GAAG6C,CAApC,EAAuC7C,CAAC,EAAxC,EAA4C;QAC1C,KAAK8B,KAAL,GAAahC,IAAb;;QACA,QAAQ6C,EAAR;UACA,KAAK,CAAL;YACEU,QAAQ,CAACvC,IAAT,CAAciC,OAAO,CAAC/C,CAAD,CAAP,CAAWlB,IAAX,CAAgB,IAAhB,CAAd;YACA;;UACF,KAAK,CAAL;YACEuE,QAAQ,CAACvC,IAAT,CAAciC,OAAO,CAAC/C,CAAD,CAAP,CAAWlB,IAAX,CAAgB,IAAhB,EAAsByD,SAAS,CAAC,CAAD,CAA/B,CAAd;YACA;;UACF,KAAK,CAAL;YACEc,QAAQ,CAACvC,IAAT,CAAciC,OAAO,CAAC/C,CAAD,CAAP,CAAWlB,IAAX,CAAgB,IAAhB,EAAsByD,SAAS,CAAC,CAAD,CAA/B,EAAoCA,SAAS,CAAC,CAAD,CAA7C,CAAd;YACA;;UACF;YACEc,QAAQ,CAACvC,IAAT,CAAciC,OAAO,CAAC/C,CAAD,CAAP,CAAWsC,KAAX,CAAiB,IAAjB,EAAuBM,IAAvB,CAAd;QAXF;MAaD;IACF,CArBM,MAqBA,IAAI,CAAC,KAAKI,IAAN,IAAclD,IAAI,KAAK,OAA3B,EAAoC;MACzC,IAAIyC,SAAS,CAAC,CAAD,CAAT,YAAwBH,KAA5B,EAAmC;QACjC,OAAOe,OAAO,CAACG,MAAR,CAAef,SAAS,CAAC,CAAD,CAAxB,CAAP,CADiC,CACI;MACtC,CAFD,MAEO;QACL,OAAOY,OAAO,CAACG,MAAR,CAAe,sCAAf,CAAP;MACD;IACF;;IAED,OAAOH,OAAO,CAACI,GAAR,CAAYF,QAAZ,CAAP;EACD,CA9FD;;EAgGA3D,YAAY,CAACd,SAAb,CAAuB6D,EAAvB,GAA4B,UAAS3C,IAAT,EAAeoB,QAAf,EAAyB;IAEnD,IAAI,OAAOpB,IAAP,KAAgB,UAApB,EAAgC;MAC9B,KAAK0D,KAAL,CAAW1D,IAAX;MACA,OAAO,IAAP;IACD;;IAED,IAAI,OAAOoB,QAAP,KAAoB,UAAxB,EAAoC;MAClC,MAAM,IAAIkB,KAAJ,CAAU,uCAAV,CAAN;IACD;;IACD,KAAKnD,OAAL,IAAgBD,IAAI,CAACF,IAAL,CAAU,IAAV,CAAhB,CAVmD,CAYnD;IACA;;IACA,KAAK4D,IAAL,CAAU,aAAV,EAAyB5C,IAAzB,EAA+BoB,QAA/B;;IAEA,IAAG,KAAK3B,QAAR,EAAkB;MAChB0B,gBAAgB,CAACnC,IAAjB,CAAsB,IAAtB,EAA4BgB,IAA5B,EAAkCoB,QAAlC;MACA,OAAO,IAAP;IACD;;IAED,IAAI,CAAC,KAAKjC,OAAL,CAAaa,IAAb,CAAL,EAAyB;MACvB;MACA,KAAKb,OAAL,CAAaa,IAAb,IAAqBoB,QAArB;IACD,CAHD,MAIK,IAAG,OAAO,KAAKjC,OAAL,CAAaa,IAAb,CAAP,KAA8B,UAAjC,EAA6C;MAChD;MACA,KAAKb,OAAL,CAAaa,IAAb,IAAqB,CAAC,KAAKb,OAAL,CAAaa,IAAb,CAAD,EAAqBoB,QAArB,CAArB;IACD,CAHI,MAIA,IAAI3C,OAAO,CAAC,KAAKU,OAAL,CAAaa,IAAb,CAAD,CAAX,EAAiC;MACpC;MACA,KAAKb,OAAL,CAAaa,IAAb,EAAmBgB,IAAnB,CAAwBI,QAAxB,EAFoC,CAIpC;;;MACA,IAAI,CAAC,KAAKjC,OAAL,CAAaa,IAAb,EAAmByB,MAAxB,EAAgC;QAE9B,IAAIC,CAAC,GAAGzC,mBAAR;;QAEA,IAAI,OAAO,KAAKE,OAAL,CAAaK,YAApB,KAAqC,WAAzC,EAAsD;UACpDkC,CAAC,GAAG,KAAKvC,OAAL,CAAaK,YAAjB;QACD;;QAED,IAAIkC,CAAC,GAAG,CAAJ,IAAS,KAAKvC,OAAL,CAAaa,IAAb,EAAmBY,MAAnB,GAA4Bc,CAAzC,EAA4C;UAE1C,KAAKvC,OAAL,CAAaa,IAAb,EAAmByB,MAAnB,GAA4B,IAA5B;UACAE,OAAO,CAACC,KAAR,CAAc,kDACA,qCADA,GAEA,kDAFd,EAGc,KAAKzC,OAAL,CAAaa,IAAb,EAAmBY,MAHjC;;UAIA,IAAGe,OAAO,CAACE,KAAX,EAAiB;YACfF,OAAO,CAACE,KAAR;UACD;QACF;MACF;IACF;;IACD,OAAO,IAAP;EACD,CAxDD;;EA0DAjC,YAAY,CAACd,SAAb,CAAuB4E,KAAvB,GAA+B,UAASxB,EAAT,EAAa;IAE1C,IAAI,OAAOA,EAAP,KAAc,UAAlB,EAA8B;MAC5B,MAAM,IAAII,KAAJ,CAAU,0CAAV,CAAN;IACD;;IAED,IAAG,CAAC,KAAKY,IAAT,EAAe;MACb,KAAKA,IAAL,GAAY,EAAZ;IACD,CARyC,CAU1C;;;IACA,KAAKA,IAAL,CAAUlC,IAAV,CAAekB,EAAf;;IACA,OAAO,IAAP;EACD,CAbD;;EAeAtC,YAAY,CAACd,SAAb,CAAuB6E,WAAvB,GAAqC/D,YAAY,CAACd,SAAb,CAAuB6D,EAA5D;;EAEA/C,YAAY,CAACd,SAAb,CAAuByD,GAAvB,GAA6B,UAASvC,IAAT,EAAeoB,QAAf,EAAyB;IACpD,IAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;MAClC,MAAM,IAAIkB,KAAJ,CAAU,iDAAV,CAAN;IACD;;IAED,IAAIvC,QAAJ;IAAA,IAAa6D,KAAK,GAAC,EAAnB;;IAEA,IAAG,KAAKnE,QAAR,EAAkB;MAChB,IAAI0D,EAAE,GAAG,OAAOnD,IAAP,KAAgB,QAAhB,GAA2BA,IAAI,CAACqB,KAAL,CAAW,KAAK9B,SAAhB,CAA3B,GAAwDS,IAAI,CAACsB,KAAL,EAAjE;MACAsC,KAAK,GAAG9D,kBAAkB,CAACd,IAAnB,CAAwB,IAAxB,EAA8B,IAA9B,EAAoCmE,EAApC,EAAwC,KAAKxD,YAA7C,EAA2D,CAA3D,CAAR;IACD,CAHD,MAIK;MACH;MACA,IAAI,CAAC,KAAKR,OAAL,CAAaa,IAAb,CAAL,EAAyB,OAAO,IAAP;MACzBD,QAAQ,GAAG,KAAKZ,OAAL,CAAaa,IAAb,CAAX;MACA4D,KAAK,CAAC5C,IAAN,CAAW;QAACD,UAAU,EAAChB;MAAZ,CAAX;IACD;;IAED,KAAK,IAAI8D,KAAK,GAAC,CAAf,EAAkBA,KAAK,GAACD,KAAK,CAAChD,MAA9B,EAAsCiD,KAAK,EAA3C,EAA+C;MAC7C,IAAIzD,IAAI,GAAGwD,KAAK,CAACC,KAAD,CAAhB;MACA9D,QAAQ,GAAGK,IAAI,CAACW,UAAhB;;MACA,IAAItC,OAAO,CAACsB,QAAD,CAAX,EAAuB;QAErB,IAAI+D,QAAQ,GAAG,CAAC,CAAhB;;QAEA,KAAK,IAAI5D,CAAC,GAAG,CAAR,EAAWU,MAAM,GAAGb,QAAQ,CAACa,MAAlC,EAA0CV,CAAC,GAAGU,MAA9C,EAAsDV,CAAC,EAAvD,EAA2D;UACzD,IAAIH,QAAQ,CAACG,CAAD,CAAR,KAAgBkB,QAAhB,IACDrB,QAAQ,CAACG,CAAD,CAAR,CAAYkB,QAAZ,IAAwBrB,QAAQ,CAACG,CAAD,CAAR,CAAYkB,QAAZ,KAAyBA,QADhD,IAEDrB,QAAQ,CAACG,CAAD,CAAR,CAAYwC,OAAZ,IAAuB3C,QAAQ,CAACG,CAAD,CAAR,CAAYwC,OAAZ,KAAwBtB,QAFlD,EAE6D;YAC3D0C,QAAQ,GAAG5D,CAAX;YACA;UACD;QACF;;QAED,IAAI4D,QAAQ,GAAG,CAAf,EAAkB;UAChB;QACD;;QAED,IAAG,KAAKrE,QAAR,EAAkB;UAChBW,IAAI,CAACW,UAAL,CAAgBgD,MAAhB,CAAuBD,QAAvB,EAAiC,CAAjC;QACD,CAFD,MAGK;UACH,KAAK3E,OAAL,CAAaa,IAAb,EAAmB+D,MAAnB,CAA0BD,QAA1B,EAAoC,CAApC;QACD;;QAED,IAAI/D,QAAQ,CAACa,MAAT,KAAoB,CAAxB,EAA2B;UACzB,IAAG,KAAKnB,QAAR,EAAkB;YAChB,OAAOW,IAAI,CAACW,UAAZ;UACD,CAFD,MAGK;YACH,OAAO,KAAK5B,OAAL,CAAaa,IAAb,CAAP;UACD;QACF;;QAED,KAAK4C,IAAL,CAAU,gBAAV,EAA4B5C,IAA5B,EAAkCoB,QAAlC;QAEA,OAAO,IAAP;MACD,CApCD,MAqCK,IAAIrB,QAAQ,KAAKqB,QAAb,IACNrB,QAAQ,CAACqB,QAAT,IAAqBrB,QAAQ,CAACqB,QAAT,KAAsBA,QADrC,IAENrB,QAAQ,CAAC2C,OAAT,IAAoB3C,QAAQ,CAAC2C,OAAT,KAAqBtB,QAFvC,EAEkD;QACrD,IAAG,KAAK3B,QAAR,EAAkB;UAChB,OAAOW,IAAI,CAACW,UAAZ;QACD,CAFD,MAGK;UACH,OAAO,KAAK5B,OAAL,CAAaa,IAAb,CAAP;QACD;;QAED,KAAK4C,IAAL,CAAU,gBAAV,EAA4B5C,IAA5B,EAAkCoB,QAAlC;MACD;IACF;;IAED,SAAS4C,yBAAT,CAAmCC,IAAnC,EAAyC;MACvC,IAAIA,IAAI,KAAKzF,SAAb,EAAwB;QACtB;MACD;;MACD,IAAI0F,IAAI,GAAGrF,MAAM,CAACqF,IAAP,CAAYD,IAAZ,CAAX;;MACA,KAAK,IAAI/D,CAAT,IAAcgE,IAAd,EAAoB;QAClB,IAAIC,GAAG,GAAGD,IAAI,CAAChE,CAAD,CAAd;QACA,IAAItB,GAAG,GAAGqF,IAAI,CAACE,GAAD,CAAd;QACA,IAAKvF,GAAG,YAAYwF,QAAhB,IAA8B,OAAOxF,GAAP,KAAe,QAAjD,EACE;;QACF,IAAIC,MAAM,CAACqF,IAAP,CAAYtF,GAAZ,EAAiBgC,MAAjB,GAA0B,CAA9B,EAAiC;UAC/BoD,yBAAyB,CAACC,IAAI,CAACE,GAAD,CAAL,CAAzB;QACD;;QACD,IAAItF,MAAM,CAACqF,IAAP,CAAYtF,GAAZ,EAAiBgC,MAAjB,KAA4B,CAAhC,EAAmC;UACjC,OAAOqD,IAAI,CAACE,GAAD,CAAX;QACD;MACF;IACF;;IACDH,yBAAyB,CAAC,KAAKrE,YAAN,CAAzB;IAEA,OAAO,IAAP;EACD,CA7FD;;EA+FAC,YAAY,CAACd,SAAb,CAAuBuF,MAAvB,GAAgC,UAASnC,EAAT,EAAa;IAC3C,IAAIhC,CAAC,GAAG,CAAR;IAAA,IAAW6C,CAAC,GAAG,CAAf;IAAA,IAAkBuB,GAAlB;;IACA,IAAIpC,EAAE,IAAI,KAAKgB,IAAX,IAAmB,KAAKA,IAAL,CAAUtC,MAAV,GAAmB,CAA1C,EAA6C;MAC3C0D,GAAG,GAAG,KAAKpB,IAAX;;MACA,KAAIhD,CAAC,GAAG,CAAJ,EAAO6C,CAAC,GAAGuB,GAAG,CAAC1D,MAAnB,EAA2BV,CAAC,GAAG6C,CAA/B,EAAkC7C,CAAC,EAAnC,EAAuC;QACrC,IAAGgC,EAAE,KAAKoC,GAAG,CAACpE,CAAD,CAAb,EAAkB;UAChBoE,GAAG,CAACP,MAAJ,CAAW7D,CAAX,EAAc,CAAd;UACA,KAAK0C,IAAL,CAAU,mBAAV,EAA+BV,EAA/B;UACA,OAAO,IAAP;QACD;MACF;IACF,CATD,MASO;MACLoC,GAAG,GAAG,KAAKpB,IAAX;;MACA,KAAIhD,CAAC,GAAG,CAAJ,EAAO6C,CAAC,GAAGuB,GAAG,CAAC1D,MAAnB,EAA2BV,CAAC,GAAG6C,CAA/B,EAAkC7C,CAAC,EAAnC,EACE,KAAK0C,IAAL,CAAU,mBAAV,EAA+B0B,GAAG,CAACpE,CAAD,CAAlC;;MACF,KAAKgD,IAAL,GAAY,EAAZ;IACD;;IACD,OAAO,IAAP;EACD,CAlBD;;EAoBAtD,YAAY,CAACd,SAAb,CAAuByF,cAAvB,GAAwC3E,YAAY,CAACd,SAAb,CAAuByD,GAA/D;;EAEA3C,YAAY,CAACd,SAAb,CAAuB0F,kBAAvB,GAA4C,UAASxE,IAAT,EAAe;IACzD,IAAIyC,SAAS,CAAC7B,MAAV,KAAqB,CAAzB,EAA4B;MAC1B,CAAC,KAAKzB,OAAN,IAAiBD,IAAI,CAACF,IAAL,CAAU,IAAV,CAAjB;MACA,OAAO,IAAP;IACD;;IAED,IAAG,KAAKS,QAAR,EAAkB;MAChB,IAAI0D,EAAE,GAAG,OAAOnD,IAAP,KAAgB,QAAhB,GAA2BA,IAAI,CAACqB,KAAL,CAAW,KAAK9B,SAAhB,CAA3B,GAAwDS,IAAI,CAACsB,KAAL,EAAjE;MACA,IAAIsC,KAAK,GAAG9D,kBAAkB,CAACd,IAAnB,CAAwB,IAAxB,EAA8B,IAA9B,EAAoCmE,EAApC,EAAwC,KAAKxD,YAA7C,EAA2D,CAA3D,CAAZ;;MAEA,KAAK,IAAIkE,KAAK,GAAC,CAAf,EAAkBA,KAAK,GAACD,KAAK,CAAChD,MAA9B,EAAsCiD,KAAK,EAA3C,EAA+C;QAC7C,IAAIzD,IAAI,GAAGwD,KAAK,CAACC,KAAD,CAAhB;QACAzD,IAAI,CAACW,UAAL,GAAkB,IAAlB;MACD;IACF,CARD,MASK;MACH,IAAI,CAAC,KAAK5B,OAAN,IAAiB,CAAC,KAAKA,OAAL,CAAaa,IAAb,CAAtB,EAA0C,OAAO,IAAP;MAC1C,KAAKb,OAAL,CAAaa,IAAb,IAAqB,IAArB;IACD;;IACD,OAAO,IAAP;EACD,CApBD;;EAsBAJ,YAAY,CAACd,SAAb,CAAuBqB,SAAvB,GAAmC,UAASH,IAAT,EAAe;IAChD,IAAG,KAAKP,QAAR,EAAkB;MAChB,IAAIM,QAAQ,GAAG,EAAf;MACA,IAAIoD,EAAE,GAAG,OAAOnD,IAAP,KAAgB,QAAhB,GAA2BA,IAAI,CAACqB,KAAL,CAAW,KAAK9B,SAAhB,CAA3B,GAAwDS,IAAI,CAACsB,KAAL,EAAjE;MACAxB,kBAAkB,CAACd,IAAnB,CAAwB,IAAxB,EAA8Be,QAA9B,EAAwCoD,EAAxC,EAA4C,KAAKxD,YAAjD,EAA+D,CAA/D;MACA,OAAOI,QAAP;IACD;;IAED,KAAKZ,OAAL,IAAgBD,IAAI,CAACF,IAAL,CAAU,IAAV,CAAhB;IAEA,IAAI,CAAC,KAAKG,OAAL,CAAaa,IAAb,CAAL,EAAyB,KAAKb,OAAL,CAAaa,IAAb,IAAqB,EAArB;;IACzB,IAAI,CAACvB,OAAO,CAAC,KAAKU,OAAL,CAAaa,IAAb,CAAD,CAAZ,EAAkC;MAChC,KAAKb,OAAL,CAAaa,IAAb,IAAqB,CAAC,KAAKb,OAAL,CAAaa,IAAb,CAAD,CAArB;IACD;;IACD,OAAO,KAAKb,OAAL,CAAaa,IAAb,CAAP;EACD,CAfD;;EAiBAJ,YAAY,CAACd,SAAb,CAAuB2F,YAAvB,GAAsC,YAAW;IAE/C,IAAG,KAAKvB,IAAR,EAAc;MACZ,OAAO,KAAKA,IAAZ;IACD,CAFD,MAGK;MACH,OAAO,EAAP;IACD;EAEF,CATD;;EAWA,IAAI,OAAOwB,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,GAA3C,EAAgD;IAC7C;IACDD,MAAM,CAAC,YAAW;MAChB,OAAO9E,YAAP;IACD,CAFK,CAAN;EAGD,CALD,MAKO,IAAI,OAAOgF,OAAP,KAAmB,QAAvB,EAAiC;IACtC;IACAC,MAAM,CAACD,OAAP,GAAiBhF,YAAjB;EACD,CAHM,MAIF;IACH;IACAkF,MAAM,CAACjF,aAAP,GAAuBD,YAAvB;EACD;AACF,CAzsBC,EAAD"},"metadata":{},"sourceType":"script"}