{"ast":null,"code":"const {\n  Transform\n} = require('stream');\n\nconst [cr] = Buffer.from('\\r');\nconst [nl] = Buffer.from('\\n');\nconst defaults = {\n  escape: '\"',\n  headers: null,\n  mapHeaders: _ref => {\n    let {\n      header\n    } = _ref;\n    return header;\n  },\n  mapValues: _ref2 => {\n    let {\n      value\n    } = _ref2;\n    return value;\n  },\n  newline: '\\n',\n  quote: '\"',\n  raw: false,\n  separator: ',',\n  skipComments: false,\n  skipLines: null,\n  maxRowBytes: Number.MAX_SAFE_INTEGER,\n  strict: false\n};\n\nclass CsvParser extends Transform {\n  constructor() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super({\n      objectMode: true,\n      highWaterMark: 16\n    });\n    if (Array.isArray(opts)) opts = {\n      headers: opts\n    };\n    const options = Object.assign({}, defaults, opts);\n    options.customNewline = options.newline !== defaults.newline;\n\n    for (const key of ['newline', 'quote', 'separator']) {\n      if (typeof options[key] !== 'undefined') {\n        [options[key]] = Buffer.from(options[key]);\n      }\n    } // if escape is not defined on the passed options, use the end value of quote\n\n\n    options.escape = (opts || {}).escape ? Buffer.from(options.escape)[0] : options.quote;\n    this.state = {\n      empty: options.raw ? Buffer.alloc(0) : '',\n      escaped: false,\n      first: true,\n      lineNumber: 0,\n      previousEnd: 0,\n      rowLength: 0,\n      quoted: false\n    };\n    this._prev = null;\n\n    if (options.headers === false) {\n      // enforce, as the column length check will fail if headers:false\n      options.strict = false;\n    }\n\n    if (options.headers || options.headers === false) {\n      this.state.first = false;\n    }\n\n    this.options = options;\n    this.headers = options.headers;\n  }\n\n  parseCell(buffer, start, end) {\n    const {\n      escape,\n      quote\n    } = this.options; // remove quotes from quoted cells\n\n    if (buffer[start] === quote && buffer[end - 1] === quote) {\n      start++;\n      end--;\n    }\n\n    let y = start;\n\n    for (let i = start; i < end; i++) {\n      // check for escape characters and skip them\n      if (buffer[i] === escape && i + 1 < end && buffer[i + 1] === quote) {\n        i++;\n      }\n\n      if (y !== i) {\n        buffer[y] = buffer[i];\n      }\n\n      y++;\n    }\n\n    return this.parseValue(buffer, start, y);\n  }\n\n  parseLine(buffer, start, end) {\n    const {\n      customNewline,\n      escape,\n      mapHeaders,\n      mapValues,\n      quote,\n      separator,\n      skipComments,\n      skipLines\n    } = this.options;\n    end--; // trim newline\n\n    if (!customNewline && buffer.length && buffer[end - 1] === cr) {\n      end--;\n    }\n\n    const comma = separator;\n    const cells = [];\n    let isQuoted = false;\n    let offset = start;\n\n    if (skipComments) {\n      const char = typeof skipComments === 'string' ? skipComments : '#';\n\n      if (buffer[start] === Buffer.from(char)[0]) {\n        return;\n      }\n    }\n\n    const mapValue = value => {\n      if (this.state.first) {\n        return value;\n      }\n\n      const index = cells.length;\n      const header = this.headers[index];\n      return mapValues({\n        header,\n        index,\n        value\n      });\n    };\n\n    for (let i = start; i < end; i++) {\n      const isStartingQuote = !isQuoted && buffer[i] === quote;\n      const isEndingQuote = isQuoted && buffer[i] === quote && i + 1 <= end && buffer[i + 1] === comma;\n      const isEscape = isQuoted && buffer[i] === escape && i + 1 < end && buffer[i + 1] === quote;\n\n      if (isStartingQuote || isEndingQuote) {\n        isQuoted = !isQuoted;\n        continue;\n      } else if (isEscape) {\n        i++;\n        continue;\n      }\n\n      if (buffer[i] === comma && !isQuoted) {\n        let value = this.parseCell(buffer, offset, i);\n        value = mapValue(value);\n        cells.push(value);\n        offset = i + 1;\n      }\n    }\n\n    if (offset < end) {\n      let value = this.parseCell(buffer, offset, end);\n      value = mapValue(value);\n      cells.push(value);\n    }\n\n    if (buffer[end - 1] === comma) {\n      cells.push(mapValue(this.state.empty));\n    }\n\n    const skip = skipLines && skipLines > this.state.lineNumber;\n    this.state.lineNumber++;\n\n    if (this.state.first && !skip) {\n      this.state.first = false;\n      this.headers = cells.map((header, index) => mapHeaders({\n        header,\n        index\n      }));\n      this.emit('headers', this.headers);\n      return;\n    }\n\n    if (!skip && this.options.strict && cells.length !== this.headers.length) {\n      const e = new RangeError('Row length does not match headers');\n      this.emit('error', e);\n    } else {\n      if (!skip) this.writeRow(cells);\n    }\n  }\n\n  parseValue(buffer, start, end) {\n    if (this.options.raw) {\n      return buffer.slice(start, end);\n    }\n\n    return buffer.toString('utf-8', start, end);\n  }\n\n  writeRow(cells) {\n    const headers = this.headers === false ? cells.map((value, index) => index) : this.headers;\n    const row = cells.reduce((o, cell, index) => {\n      const header = headers[index];\n      if (header === null) return o; // skip columns\n\n      if (header !== undefined) {\n        o[header] = cell;\n      } else {\n        o[`_${index}`] = cell;\n      }\n\n      return o;\n    }, {});\n    this.push(row);\n  }\n\n  _flush(cb) {\n    if (this.state.escaped || !this._prev) return cb();\n    this.parseLine(this._prev, this.state.previousEnd, this._prev.length + 1); // plus since online -1s\n\n    cb();\n  }\n\n  _transform(data, enc, cb) {\n    if (typeof data === 'string') {\n      data = Buffer.from(data);\n    }\n\n    const {\n      escape,\n      quote\n    } = this.options;\n    let start = 0;\n    let buffer = data;\n\n    if (this._prev) {\n      start = this._prev.length;\n      buffer = Buffer.concat([this._prev, data]);\n      this._prev = null;\n    }\n\n    const bufferLength = buffer.length;\n\n    for (let i = start; i < bufferLength; i++) {\n      const chr = buffer[i];\n      const nextChr = i + 1 < bufferLength ? buffer[i + 1] : null;\n      this.state.rowLength++;\n\n      if (this.state.rowLength > this.options.maxRowBytes) {\n        return cb(new Error('Row exceeds the maximum size'));\n      }\n\n      if (!this.state.escaped && chr === escape && nextChr === quote && i !== start) {\n        this.state.escaped = true;\n        continue;\n      } else if (chr === quote) {\n        if (this.state.escaped) {\n          this.state.escaped = false; // non-escaped quote (quoting the cell)\n        } else {\n          this.state.quoted = !this.state.quoted;\n        }\n\n        continue;\n      }\n\n      if (!this.state.quoted) {\n        if (this.state.first && !this.options.customNewline) {\n          if (chr === nl) {\n            this.options.newline = nl;\n          } else if (chr === cr) {\n            if (nextChr !== nl) {\n              this.options.newline = cr;\n            }\n          }\n        }\n\n        if (chr === this.options.newline) {\n          this.parseLine(buffer, this.state.previousEnd, i + 1);\n          this.state.previousEnd = i + 1;\n          this.state.rowLength = 0;\n        }\n      }\n    }\n\n    if (this.state.previousEnd === bufferLength) {\n      this.state.previousEnd = 0;\n      return cb();\n    }\n\n    if (bufferLength - this.state.previousEnd < data.length) {\n      this._prev = data;\n      this.state.previousEnd -= bufferLength - data.length;\n      return cb();\n    }\n\n    this._prev = buffer;\n    cb();\n  }\n\n}\n\nmodule.exports = opts => new CsvParser(opts);","map":{"version":3,"names":["Transform","require","cr","Buffer","from","nl","defaults","escape","headers","mapHeaders","header","mapValues","value","newline","quote","raw","separator","skipComments","skipLines","maxRowBytes","Number","MAX_SAFE_INTEGER","strict","CsvParser","constructor","opts","objectMode","highWaterMark","Array","isArray","options","Object","assign","customNewline","key","state","empty","alloc","escaped","first","lineNumber","previousEnd","rowLength","quoted","_prev","parseCell","buffer","start","end","y","i","parseValue","parseLine","length","comma","cells","isQuoted","offset","char","mapValue","index","isStartingQuote","isEndingQuote","isEscape","push","skip","map","emit","e","RangeError","writeRow","slice","toString","row","reduce","o","cell","undefined","_flush","cb","_transform","data","enc","concat","bufferLength","chr","nextChr","Error","module","exports"],"sources":["/Users/navid/Documents/node_modules/csv-parser/index.js"],"sourcesContent":["const { Transform } = require('stream')\n\nconst [cr] = Buffer.from('\\r')\nconst [nl] = Buffer.from('\\n')\nconst defaults = {\n  escape: '\"',\n  headers: null,\n  mapHeaders: ({ header }) => header,\n  mapValues: ({ value }) => value,\n  newline: '\\n',\n  quote: '\"',\n  raw: false,\n  separator: ',',\n  skipComments: false,\n  skipLines: null,\n  maxRowBytes: Number.MAX_SAFE_INTEGER,\n  strict: false\n}\n\nclass CsvParser extends Transform {\n  constructor (opts = {}) {\n    super({ objectMode: true, highWaterMark: 16 })\n\n    if (Array.isArray(opts)) opts = { headers: opts }\n\n    const options = Object.assign({}, defaults, opts)\n\n    options.customNewline = options.newline !== defaults.newline\n\n    for (const key of ['newline', 'quote', 'separator']) {\n      if (typeof options[key] !== 'undefined') {\n        ([options[key]] = Buffer.from(options[key]))\n      }\n    }\n\n    // if escape is not defined on the passed options, use the end value of quote\n    options.escape = (opts || {}).escape ? Buffer.from(options.escape)[0] : options.quote\n\n    this.state = {\n      empty: options.raw ? Buffer.alloc(0) : '',\n      escaped: false,\n      first: true,\n      lineNumber: 0,\n      previousEnd: 0,\n      rowLength: 0,\n      quoted: false\n    }\n\n    this._prev = null\n\n    if (options.headers === false) {\n      // enforce, as the column length check will fail if headers:false\n      options.strict = false\n    }\n\n    if (options.headers || options.headers === false) {\n      this.state.first = false\n    }\n\n    this.options = options\n    this.headers = options.headers\n  }\n\n  parseCell (buffer, start, end) {\n    const { escape, quote } = this.options\n    // remove quotes from quoted cells\n    if (buffer[start] === quote && buffer[end - 1] === quote) {\n      start++\n      end--\n    }\n\n    let y = start\n\n    for (let i = start; i < end; i++) {\n      // check for escape characters and skip them\n      if (buffer[i] === escape && i + 1 < end && buffer[i + 1] === quote) {\n        i++\n      }\n\n      if (y !== i) {\n        buffer[y] = buffer[i]\n      }\n      y++\n    }\n\n    return this.parseValue(buffer, start, y)\n  }\n\n  parseLine (buffer, start, end) {\n    const { customNewline, escape, mapHeaders, mapValues, quote, separator, skipComments, skipLines } = this.options\n\n    end-- // trim newline\n    if (!customNewline && buffer.length && buffer[end - 1] === cr) {\n      end--\n    }\n\n    const comma = separator\n    const cells = []\n    let isQuoted = false\n    let offset = start\n\n    if (skipComments) {\n      const char = typeof skipComments === 'string' ? skipComments : '#'\n      if (buffer[start] === Buffer.from(char)[0]) {\n        return\n      }\n    }\n\n    const mapValue = (value) => {\n      if (this.state.first) {\n        return value\n      }\n\n      const index = cells.length\n      const header = this.headers[index]\n\n      return mapValues({ header, index, value })\n    }\n\n    for (let i = start; i < end; i++) {\n      const isStartingQuote = !isQuoted && buffer[i] === quote\n      const isEndingQuote = isQuoted && buffer[i] === quote && i + 1 <= end && buffer[i + 1] === comma\n      const isEscape = isQuoted && buffer[i] === escape && i + 1 < end && buffer[i + 1] === quote\n\n      if (isStartingQuote || isEndingQuote) {\n        isQuoted = !isQuoted\n        continue\n      } else if (isEscape) {\n        i++\n        continue\n      }\n\n      if (buffer[i] === comma && !isQuoted) {\n        let value = this.parseCell(buffer, offset, i)\n        value = mapValue(value)\n        cells.push(value)\n        offset = i + 1\n      }\n    }\n\n    if (offset < end) {\n      let value = this.parseCell(buffer, offset, end)\n      value = mapValue(value)\n      cells.push(value)\n    }\n\n    if (buffer[end - 1] === comma) {\n      cells.push(mapValue(this.state.empty))\n    }\n\n    const skip = skipLines && skipLines > this.state.lineNumber\n    this.state.lineNumber++\n\n    if (this.state.first && !skip) {\n      this.state.first = false\n      this.headers = cells.map((header, index) => mapHeaders({ header, index }))\n\n      this.emit('headers', this.headers)\n      return\n    }\n\n    if (!skip && this.options.strict && cells.length !== this.headers.length) {\n      const e = new RangeError('Row length does not match headers')\n      this.emit('error', e)\n    } else {\n      if (!skip) this.writeRow(cells)\n    }\n  }\n\n  parseValue (buffer, start, end) {\n    if (this.options.raw) {\n      return buffer.slice(start, end)\n    }\n\n    return buffer.toString('utf-8', start, end)\n  }\n\n  writeRow (cells) {\n    const headers = (this.headers === false) ? cells.map((value, index) => index) : this.headers\n\n    const row = cells.reduce((o, cell, index) => {\n      const header = headers[index]\n      if (header === null) return o // skip columns\n      if (header !== undefined) {\n        o[header] = cell\n      } else {\n        o[`_${index}`] = cell\n      }\n      return o\n    }, {})\n\n    this.push(row)\n  }\n\n  _flush (cb) {\n    if (this.state.escaped || !this._prev) return cb()\n    this.parseLine(this._prev, this.state.previousEnd, this._prev.length + 1) // plus since online -1s\n    cb()\n  }\n\n  _transform (data, enc, cb) {\n    if (typeof data === 'string') {\n      data = Buffer.from(data)\n    }\n\n    const { escape, quote } = this.options\n    let start = 0\n    let buffer = data\n\n    if (this._prev) {\n      start = this._prev.length\n      buffer = Buffer.concat([this._prev, data])\n      this._prev = null\n    }\n\n    const bufferLength = buffer.length\n\n    for (let i = start; i < bufferLength; i++) {\n      const chr = buffer[i]\n      const nextChr = i + 1 < bufferLength ? buffer[i + 1] : null\n\n      this.state.rowLength++\n      if (this.state.rowLength > this.options.maxRowBytes) {\n        return cb(new Error('Row exceeds the maximum size'))\n      }\n\n      if (!this.state.escaped && chr === escape && nextChr === quote && i !== start) {\n        this.state.escaped = true\n        continue\n      } else if (chr === quote) {\n        if (this.state.escaped) {\n          this.state.escaped = false\n          // non-escaped quote (quoting the cell)\n        } else {\n          this.state.quoted = !this.state.quoted\n        }\n        continue\n      }\n\n      if (!this.state.quoted) {\n        if (this.state.first && !this.options.customNewline) {\n          if (chr === nl) {\n            this.options.newline = nl\n          } else if (chr === cr) {\n            if (nextChr !== nl) {\n              this.options.newline = cr\n            }\n          }\n        }\n\n        if (chr === this.options.newline) {\n          this.parseLine(buffer, this.state.previousEnd, i + 1)\n          this.state.previousEnd = i + 1\n          this.state.rowLength = 0\n        }\n      }\n    }\n\n    if (this.state.previousEnd === bufferLength) {\n      this.state.previousEnd = 0\n      return cb()\n    }\n\n    if (bufferLength - this.state.previousEnd < data.length) {\n      this._prev = data\n      this.state.previousEnd -= (bufferLength - data.length)\n      return cb()\n    }\n\n    this._prev = buffer\n    cb()\n  }\n}\n\nmodule.exports = (opts) => new CsvParser(opts)\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}