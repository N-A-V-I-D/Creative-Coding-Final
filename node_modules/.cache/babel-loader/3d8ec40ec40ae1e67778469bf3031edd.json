{"ast":null,"code":"// https://github.com/jquery/jquery/blob/2.1.3/src/manipulation/var/rcheckableType.js\n// https://github.com/jquery/jquery/blob/2.1.3/src/serialize.js\nvar _ = require('lodash'),\n    submittableSelector = 'input,select,textarea,keygen',\n    rCRLF = /\\r?\\n/g;\n\nexports.serializeArray = function () {\n  // Resolve all form elements from either forms or collections of form elements\n  var Cheerio = this.constructor;\n  return this.map(function () {\n    var elem = this;\n    var $elem = Cheerio(elem);\n\n    if (elem.name === 'form') {\n      return $elem.find(submittableSelector).toArray();\n    } else {\n      return $elem.filter(submittableSelector).toArray();\n    }\n  }).filter( // Verify elements have a name (`attr.name`) and are not disabled (`:disabled`)\n  '[name!=\"\"]:not(:disabled)' // and cannot be clicked (`[type=submit]`) or are used in `x-www-form-urlencoded` (`[type=file]`)\n  + ':not(:submit, :button, :image, :reset, :file)' // and are either checked/don't have a checkable state\n  + ':matches([checked], :not(:checkbox, :radio))' // Convert each of the elements to its value(s)\n  ).map(function (i, elem) {\n    var $elem = Cheerio(elem);\n    var name = $elem.attr('name');\n    var val = $elem.val(); // If there is no value set (e.g. `undefined`, `null`), then return nothing\n\n    if (val == null) {\n      return null;\n    } else {\n      // If we have an array of values (e.g. `<select multiple>`), return an array of key/value pairs\n      if (Array.isArray(val)) {\n        return _.map(val, function (val) {\n          // We trim replace any line endings (e.g. `\\r` or `\\r\\n` with `\\r\\n`) to guarantee consistency across platforms\n          //   These can occur inside of `<textarea>'s`\n          return {\n            name: name,\n            value: val.replace(rCRLF, '\\r\\n')\n          };\n        }); // Otherwise (e.g. `<input type=\"text\">`, return only one key/value pair\n      } else {\n        return {\n          name: name,\n          value: val.replace(rCRLF, '\\r\\n')\n        };\n      }\n    } // Convert our result to an array\n\n  }).get();\n};","map":{"version":3,"names":["_","require","submittableSelector","rCRLF","exports","serializeArray","Cheerio","constructor","map","elem","$elem","name","find","toArray","filter","i","attr","val","Array","isArray","value","replace","get"],"sources":["/Users/navid/Documents/Final Project 2/vocab/node_modules/cheerio-without-node-native/lib/api/forms.js"],"sourcesContent":["// https://github.com/jquery/jquery/blob/2.1.3/src/manipulation/var/rcheckableType.js\n// https://github.com/jquery/jquery/blob/2.1.3/src/serialize.js\nvar _ = require('lodash'),\n    submittableSelector = 'input,select,textarea,keygen',\n    rCRLF = /\\r?\\n/g;\n\nexports.serializeArray = function() {\n  // Resolve all form elements from either forms or collections of form elements\n  var Cheerio = this.constructor;\n  return this.map(function() {\n      var elem = this;\n      var $elem = Cheerio(elem);\n      if (elem.name === 'form') {\n        return $elem.find(submittableSelector).toArray();\n      } else {\n        return $elem.filter(submittableSelector).toArray();\n      }\n    }).filter(\n        // Verify elements have a name (`attr.name`) and are not disabled (`:disabled`)\n        '[name!=\"\"]:not(:disabled)'\n        // and cannot be clicked (`[type=submit]`) or are used in `x-www-form-urlencoded` (`[type=file]`)\n        + ':not(:submit, :button, :image, :reset, :file)'\n        // and are either checked/don't have a checkable state\n        + ':matches([checked], :not(:checkbox, :radio))'\n    // Convert each of the elements to its value(s)\n    ).map(function(i, elem) {\n      var $elem = Cheerio(elem);\n      var name = $elem.attr('name');\n      var val = $elem.val();\n\n      // If there is no value set (e.g. `undefined`, `null`), then return nothing\n      if (val == null) {\n        return null;\n      } else {\n        // If we have an array of values (e.g. `<select multiple>`), return an array of key/value pairs\n        if (Array.isArray(val)) {\n          return _.map(val, function(val) {\n            // We trim replace any line endings (e.g. `\\r` or `\\r\\n` with `\\r\\n`) to guarantee consistency across platforms\n            //   These can occur inside of `<textarea>'s`\n            return {name: name, value: val.replace( rCRLF, '\\r\\n' )};\n          });\n        // Otherwise (e.g. `<input type=\"text\">`, return only one key/value pair\n        } else {\n          return {name: name, value: val.replace( rCRLF, '\\r\\n' )};\n        }\n      }\n    // Convert our result to an array\n    }).get();\n};\n"],"mappings":"AAAA;AACA;AACA,IAAIA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAf;AAAA,IACIC,mBAAmB,GAAG,8BAD1B;AAAA,IAEIC,KAAK,GAAG,QAFZ;;AAIAC,OAAO,CAACC,cAAR,GAAyB,YAAW;EAClC;EACA,IAAIC,OAAO,GAAG,KAAKC,WAAnB;EACA,OAAO,KAAKC,GAAL,CAAS,YAAW;IACvB,IAAIC,IAAI,GAAG,IAAX;IACA,IAAIC,KAAK,GAAGJ,OAAO,CAACG,IAAD,CAAnB;;IACA,IAAIA,IAAI,CAACE,IAAL,KAAc,MAAlB,EAA0B;MACxB,OAAOD,KAAK,CAACE,IAAN,CAAWV,mBAAX,EAAgCW,OAAhC,EAAP;IACD,CAFD,MAEO;MACL,OAAOH,KAAK,CAACI,MAAN,CAAaZ,mBAAb,EAAkCW,OAAlC,EAAP;IACD;EACF,CARI,EAQFC,MARE,EASD;EACA,4BACA;EADA,EAEE,+CAFF,CAGA;EAHA,EAIE,8CAdD,CAeL;EAfK,EAgBHN,GAhBG,CAgBC,UAASO,CAAT,EAAYN,IAAZ,EAAkB;IACtB,IAAIC,KAAK,GAAGJ,OAAO,CAACG,IAAD,CAAnB;IACA,IAAIE,IAAI,GAAGD,KAAK,CAACM,IAAN,CAAW,MAAX,CAAX;IACA,IAAIC,GAAG,GAAGP,KAAK,CAACO,GAAN,EAAV,CAHsB,CAKtB;;IACA,IAAIA,GAAG,IAAI,IAAX,EAAiB;MACf,OAAO,IAAP;IACD,CAFD,MAEO;MACL;MACA,IAAIC,KAAK,CAACC,OAAN,CAAcF,GAAd,CAAJ,EAAwB;QACtB,OAAOjB,CAAC,CAACQ,GAAF,CAAMS,GAAN,EAAW,UAASA,GAAT,EAAc;UAC9B;UACA;UACA,OAAO;YAACN,IAAI,EAAEA,IAAP;YAAaS,KAAK,EAAEH,GAAG,CAACI,OAAJ,CAAalB,KAAb,EAAoB,MAApB;UAApB,CAAP;QACD,CAJM,CAAP,CADsB,CAMxB;MACC,CAPD,MAOO;QACL,OAAO;UAACQ,IAAI,EAAEA,IAAP;UAAaS,KAAK,EAAEH,GAAG,CAACI,OAAJ,CAAalB,KAAb,EAAoB,MAApB;QAApB,CAAP;MACD;IACF,CApBqB,CAqBxB;;EACC,CAtCI,EAsCFmB,GAtCE,EAAP;AAuCD,CA1CD"},"metadata":{},"sourceType":"script"}